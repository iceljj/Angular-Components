{"version":3,"file":"fmode-video.mjs","sources":["../../../projects/fmode-video/src/lib/videogular.ts","../../../projects/fmode-video/src/lib/videogular.html","../../../projects/fmode-video/src/lib/videogular.module.ts","../../../projects/fmode-video/src/public-api.ts","../../../projects/fmode-video/src/fmode-video.ts"],"sourcesContent":["import {\r\n  Component,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnInit,\r\n  Renderer2,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  NgZone\r\n} from '@angular/core';\r\nimport { VgApiService, VgPlayerComponent } from '@videogular/ngx-videogular/core';\r\nimport { VgControlsModule } from '@videogular/ngx-videogular/controls';\r\nimport { VgCoreModule } from '@videogular/ngx-videogular/core';\r\nimport { VgOverlayPlayModule } from '@videogular/ngx-videogular/overlay-play';\r\nimport { VgBufferingModule } from '@videogular/ngx-videogular/buffering';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport Hls from 'hls.js';\r\n\r\n/**\r\n * 视频播放器组件 (使用HLS实现)\r\n * @remarks\r\n * 基于HLS.js实现大厂级别的视频播放功能，包括：\r\n * 1. 支持HLS流媒体播放\r\n * 2. 智能预加载和缓存管理\r\n * 3. 自适应码率切换\r\n * 4. 多种视图模式（宽屏/关灯/无黑边）\r\n *\r\n * 注意：本组件已完全重构以支持HLS协议\r\n *\r\n * @example\r\n * <app-videogular [videoSources]=\"hlsSources\"></app-videogular>\r\n */\r\n@Component({\r\n  selector: 'app-videogular',\r\n  standalone: true,\r\n  imports: [\r\n    VgCoreModule,\r\n    VgControlsModule,\r\n    VgOverlayPlayModule,\r\n    VgBufferingModule,\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  templateUrl: './videogular.html',\r\n  styleUrls: ['./videogular.scss']\r\n})\r\nexport class Videogular implements OnInit, OnDestroy, AfterViewInit {\r\n  /** 播放器API实例 */\r\n  public api!: VgApiService;\r\n\r\n  /** HLS实例 */\r\n  private hls!: Hls;\r\n\r\n  /** 播放器DOM元素引用 */\r\n  @ViewChild('mediaPlayer') player!: VgPlayerComponent;\r\n  @ViewChild('media') media!: ElementRef<HTMLVideoElement>;\r\n  @ViewChild('scrubBar') scrubBar!: ElementRef;\r\n\r\n\r\n  // 状态控制变量\r\n  /**\r\n   * 是否正在播放\r\n   */\r\n  public isPlaying = false;\r\n\r\n  /**\r\n   * 是否显示覆盖播放按钮\r\n   */\r\n  public showOverlayPlay = true;\r\n\r\n  /**\r\n   * 是否隐藏控制栏\r\n   */\r\n  public hideControls = false;\r\n\r\n  /**\r\n   * 是否正在缓冲\r\n   */\r\n  public isBuffering = false;\r\n\r\n  /**\r\n   * 是否加载错误\r\n   */\r\n  public loadError = false;\r\n\r\n  /**\r\n   * 是否为直播流\r\n   */\r\n  public isLiveStream = false;\r\n\r\n  // 音频控制\r\n  /**\r\n   * 音量大小 (0-1)\r\n   */\r\n  public volume = 1.0;\r\n\r\n  /**\r\n   * 是否静音\r\n   */\r\n  public isMuted = false;\r\n\r\n  // 播放控制\r\n  /**\r\n   * 播放速率\r\n   */\r\n  public playbackRate = 1.0;\r\n\r\n  /**\r\n   * 播放进度百分比\r\n   */\r\n  public progress = 0;\r\n\r\n  /**\r\n   * 缓冲百分比\r\n   */\r\n  public bufferPercentage = 0;\r\n\r\n  /**\r\n   * 缓冲区间列表\r\n   */\r\n  public bufferedRanges: any[] = [];\r\n\r\n  /**\r\n   * 缓冲开始时间\r\n   */\r\n  public bufferStart = 0;\r\n\r\n  /**\r\n   * 缓冲结束时间\r\n   */\r\n  public bufferEnd = 0;\r\n\r\n  /**\r\n   * 视频总时长\r\n   */\r\n  public totalDuration = 0;\r\n\r\n  // 视图模式\r\n  /**\r\n   * 是否为宽屏模式\r\n   */\r\n  public isWidescreen = false;\r\n\r\n  /**\r\n   * 是否为关灯模式\r\n   */\r\n  public isTheaterMode = false;\r\n\r\n  /**\r\n   * 是否为网页全屏\r\n   */\r\n  public isWebFullscreen = false;\r\n\r\n  // 控制面板状态\r\n  /**\r\n   * 是否显示音量滑块\r\n   */\r\n  public showVolumeSlider = false;\r\n\r\n  /**\r\n   * 是否显示画质选项\r\n   */\r\n  public showQualityOptions = false;\r\n\r\n  /**\r\n   * 是否显示播放速度选项\r\n   */\r\n  public showSpeedOptions = false;\r\n\r\n  /**\r\n   * 是否显示设置菜单\r\n   */\r\n  public showSettingsMenu = false;\r\n\r\n  // 播放选项\r\n  /**\r\n   * 播放速度选项列表\r\n   */\r\n  public speedOptions = [\r\n    { label: '2.0x', value: 2.0 },\r\n    { label: '1.5x', value: 1.5 },\r\n    { label: '1.25x', value: 1.25 },\r\n    { label: '正常', value: 1.0 },\r\n    { label: '0.75x', value: 0.75 },\r\n    { label: '0.5x', value: 0.5 }\r\n  ];\r\n\r\n  // HLS源配置\r\n  /**\r\n   * 视频封面图\r\n   */\r\n  public posterImage = 'assets/images/video-thumbnail.jpg';\r\n\r\n  /**\r\n   * 当前选择的画质\r\n   */\r\n  public selectedQuality: any;\r\n\r\n  /**\r\n   * 可用画质列表\r\n   */\r\n  public availableQualities: any[] = [];\r\n\r\n  /**\r\n   * 当前HLS流URL\r\n   */\r\n  public currentHlsUrl = '';\r\n\r\n  /**\r\n   * HLS质量级别列表\r\n   */\r\n  public hlsLevels: any[] = [];\r\n\r\n  // HLS配置参数\r\n  /**\r\n   * HLS配置选项\r\n   */\r\n  private hlsConfig: any = {\r\n    maxBufferLength: 30,       // 最大缓冲长度(秒)\r\n    maxMaxBufferLength: 60,   // 最大缓冲长度上限\r\n    maxBufferSize: 60 * 1000 * 1000, // 最大缓冲大小(60MB)\r\n    highBufferWatchdogPeriod: 1, // 监控缓冲状态的时间间隔\r\n    enableWorker: true,        // 启用Web Worker\r\n    lowLatencyMode: true,      // 低延迟模式\r\n    backBufferLength: 5,       // 保留的缓冲长度\r\n    testBandwidth: true,       // 启用带宽检测\r\n    debug: false,              // 禁用调试日志\r\n    fragLoadingRetryDelay: 500, // 片段加载失败重试延时(ms)\r\n    manifestLoadingTimeOut: 10000 // 播放列表加载超时时间(ms)\r\n  };\r\n\r\n  // 预加载相关变量\r\n  /**\r\n   * 是否正在预加载\r\n   */\r\n  private isPreloading = false;\r\n\r\n  // 内部状态管理\r\n  /**\r\n   * 控制栏隐藏定时器\r\n   */\r\n  private controlHideTimeout: any;\r\n\r\n  /**\r\n   * 空格键防抖标记\r\n   */\r\n  private spaceKeyDebounced = false;\r\n\r\n  /**\r\n   * 是否正在拖动进度条\r\n   */\r\n  private isScrubbing = false;\r\n\r\n  /**\r\n   * 拖动开始时的鼠标X坐标\r\n   */\r\n  private scrubStartX = 0;\r\n\r\n  /**\r\n   * 拖动开始时的播放百分比\r\n   */\r\n  private scrubStartPercentage = 0;\r\n\r\n  /**\r\n   * 拖动前是否正在播放\r\n   */\r\n  private wasPlaying = false;\r\n\r\n  /**\r\n   * 控制面板防抖定时器集合\r\n   */\r\n  private controlDebounceTimers: { [key: string]: any } = {};\r\n\r\n  /**\r\n   * 当前重试次数\r\n   */\r\n  private retryCount = 0;\r\n\r\n  /**\r\n   * 最大重试次数\r\n   */\r\n  private maxRetries = 1;\r\n\r\n  /**\r\n   * 缓冲超时定时器\r\n   */\r\n  private bufferingTimeout: any;\r\n\r\n  /**\r\n   * 缓冲超时持续时间(毫秒)\r\n   */\r\n  private bufferingTimeoutDuration = 3000;\r\n\r\n  /**\r\n   * 缓冲更新计时器\r\n   */\r\n  private bufferUpdateInterval: any;\r\n\r\n  /**\r\n   * 组件构造函数\r\n   * @param renderer Angular渲染器，用于操作DOM元素\r\n   * @param cdr 变更检测器，用于强制刷新UI\r\n   * @param zone Angular区域，用于管理异步操作\r\n   */\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private cdr: ChangeDetectorRef,\r\n    private zone: NgZone\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 组件初始化钩子\r\n   * 初始化HLS源列表和默认选中的画质\r\n   */\r\n  ngOnInit(): void {\r\n    // 初始化HLS源列表\r\n    this.availableQualities = [\r\n      { label: '超清 1080p', url: 'public/video/1.m3u8', bitrate: 5000 },\r\n      { label: '高清 720p', url: 'public/video/1.m3u8', bitrate: 2500 },\r\n      { label: '标清 480p', url: 'public/video/1.m3u8', bitrate: 1000 },\r\n      { label: '流畅 360p', url: 'public/video/2.m3u8', bitrate: 500 },\r\n    ];\r\n\r\n    this.selectedQuality = this.availableQualities[3];\r\n    this.currentHlsUrl = this.selectedQuality.url;\r\n  }\r\n\r\n  /**\r\n   * 视图初始化完成钩子\r\n   * 设置全局事件监听器并初始化HLS播放器\r\n   */\r\n  ngAfterViewInit(): void {\r\n    this.setupGlobalListeners();\r\n    this.initializeHlsPlayer();\r\n  }\r\n\r\n  /**\r\n   * 组件销毁钩子\r\n   * 清理所有资源，包括定时器和HLS实例\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.cleanupResources();\r\n  }\r\n\r\n  /**\r\n   * 初始化HLS播放器\r\n   * 创建并配置HLS实例，加载视频源，设置事件监听\r\n   */\r\n  private initializeHlsPlayer(): void {\r\n    const videoElement = this.media.nativeElement;\r\n\r\n    // 清理已有HLS实例\r\n    if (this.hls) {\r\n      this.hls.destroy();\r\n    }\r\n\r\n    // 创建新的HLS实例\r\n    this.hls = new Hls(this.hlsConfig);\r\n\r\n    // 绑定到video元素\r\n    this.hls.attachMedia(videoElement);\r\n\r\n    // 设置初始视频源\r\n    this.hls.loadSource(this.currentHlsUrl);\r\n\r\n    // 设置HLS事件监听器\r\n    this.setupHlsEvents();\r\n\r\n    // 延迟检测状态\r\n    setTimeout(() => this.detectStreamType(), 1000);\r\n\r\n    // 开始缓冲更新计时器\r\n    this.startBufferUpdateTimer();\r\n  }\r\n\r\n  /**\r\n   * 设置HLS事件监听器\r\n   * 为HLS实例添加各种事件的监听器，处理播放列表加载、缓冲、错误等情况\r\n   */\r\n  private setupHlsEvents(): void {\r\n    if (!this.hls) return;\r\n\r\n    // 监听播放列表加载事件\r\n    this.hls.on(Hls.Events.MANIFEST_LOADED, (event, data) => {\r\n      this.zone.run(() => {\r\n        // 获取所有质量级别\r\n        this.hlsLevels = data.levels || [];\r\n\r\n        // 重置播放器状态\r\n        this.loadError = false;\r\n        this.isBuffering = false;\r\n\r\n        // 检测是否为直播流\r\n        this.detectStreamType();\r\n      });\r\n    });\r\n\r\n    // 监听片段加载事件\r\n    this.hls.on(Hls.Events.FRAG_LOADED, (event, data) => {\r\n      // 可在此处添加数据收集点，用于分析加载性能\r\n    });\r\n\r\n    // 监听缓冲事件\r\n    this.hls.on(Hls.Events.BUFFER_CREATED, () => {\r\n      // 触发缓冲状态更新\r\n      this.updateBufferDisplay();\r\n    });\r\n\r\n    // 监听缓冲进度\r\n    this.hls.on(Hls.Events.BUFFER_APPENDING, () => {\r\n      // 触发缓冲状态更新\r\n      this.updateBufferDisplay();\r\n    });\r\n\r\n    // 监听错误事件\r\n    this.hls.on(Hls.Events.ERROR, (event, data) => {\r\n      this.zone.run(() => {\r\n        // 处理缓冲停滞错误\r\n        if (data.details === Hls.ErrorDetails.BUFFER_STALLED_ERROR) {\r\n          this.showBuffering();\r\n        }\r\n        this.handleHlsError(data);\r\n      });\r\n    });\r\n\r\n    // 监听缓冲结束事件\r\n    this.hls.on(Hls.Events.BUFFER_APPENDED, () => {\r\n      this.zone.run(() => {\r\n        this.hideBuffering();\r\n        this.clearBufferingTimeout();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 设置全局事件监听器\r\n   * 为文档添加全局鼠标和键盘事件监听器，用于处理进度条拖动和全局快捷键\r\n   */\r\n  private setupGlobalListeners(): void {\r\n    this.renderer.listen('document', 'mousemove', (event) =>\r\n      this.handleGlobalMouseMove(event));\r\n    this.renderer.listen('document', 'mouseup', () =>\r\n      this.handleGlobalMouseUp());\r\n    this.renderer.listen('document', 'keydown', (event) =>\r\n      this.handleGlobalKeyDown(event));\r\n  }\r\n\r\n  /**\r\n   * 检测视频流类型（直播/点播）\r\n   * 根据视频的duration属性判断是直播流还是点播视频\r\n   */\r\n  private detectStreamType(): void {\r\n    if (!this.media?.nativeElement) return;\r\n\r\n    const duration = this.media.nativeElement.duration;\r\n    if (duration === Infinity || duration === 0) {\r\n      this.isLiveStream = true;\r\n    } else {\r\n      this.isLiveStream = false;\r\n      this.totalDuration = duration;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理资源\r\n   * 在组件销毁时清理所有定时器、HLS实例和其他资源，防止内存泄漏\r\n   */\r\n  private cleanupResources(): void {\r\n    // 清理定时器\r\n    if (this.controlHideTimeout) clearTimeout(this.controlHideTimeout);\r\n    if (this.bufferingTimeout) clearTimeout(this.bufferingTimeout);\r\n    if (this.bufferUpdateInterval) clearInterval(this.bufferUpdateInterval);\r\n\r\n    // 清理HLS实例\r\n    if (this.hls) {\r\n      this.hls.stopLoad();\r\n      this.hls.detachMedia();\r\n      this.hls.destroy();\r\n    }\r\n\r\n    // 清理控制面板防抖定时器\r\n    Object.keys(this.controlDebounceTimers).forEach(key => {\r\n      if (this.controlDebounceTimers[key]) {\r\n        clearTimeout(this.controlDebounceTimers[key]);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 播放器准备就绪回调\r\n   * 当Videogular播放器初始化完成后调用，设置初始状态和事件监听\r\n   * @param api 视频播放器API实例\r\n   */\r\n  onPlayerReady(api: VgApiService): void {\r\n    this.api = api;\r\n    this.api.volume = this.volume;\r\n    this.api.volume = 0; // 初始设置为静音\r\n    this.api.playbackRate = this.playbackRate;\r\n    this.api.play();\r\n    // 监听播放事件\r\n    this.api.getDefaultMedia().subscriptions.play.subscribe(() => {\r\n      this.isPlaying = true;\r\n      this.showOverlayPlay = true;\r\n    });\r\n\r\n    // 监听暂停事件\r\n    this.api.getDefaultMedia().subscriptions.pause.subscribe(() => {\r\n      this.isPlaying = false;\r\n      if (!this.isBuffering && !this.loadError) {\r\n        this.showOverlayPlay = true;\r\n      }\r\n    });\r\n\r\n    // 开始控制栏隐藏计时器\r\n    this.startControlBarTimer();\r\n  }\r\n\r\n  /**\r\n   * 处理HLS错误\r\n   * 根据不同类型的HLS错误采取相应的处理措施，如重试加载或显示错误信息\r\n   * @param data 错误数据，包含错误详情和类型\r\n   */\r\n  private handleHlsError(data: any): void {\r\n    console.error('HLS Error:', data.details);\r\n\r\n    // 统一使用handleVideoError处理所有类型的错误，确保一致的重试逻辑\r\n    switch (data.details) {\r\n      case Hls.ErrorDetails.MANIFEST_LOAD_ERROR:\r\n      case Hls.ErrorDetails.MANIFEST_LOAD_TIMEOUT:\r\n        // 播放列表加载错误\r\n        this.handleVideoError('播放列表加载失败');\r\n        break;\r\n\r\n      case Hls.ErrorDetails.FRAG_LOAD_ERROR:\r\n      case Hls.ErrorDetails.FRAG_LOAD_TIMEOUT:\r\n        // 片段加载错误\r\n        this.handleVideoError('视频片段加载失败');\r\n        break;\r\n\r\n      case Hls.ErrorDetails.BUFFER_STALLED_ERROR:\r\n        // 缓冲停滞错误\r\n        // 注意：这个错误是在监听器中特别处理的，这里不再重复处理\r\n        break;\r\n\r\n      default:\r\n        console.log(\"其他错误\")\r\n        this.handleVideoError('视频播放错误');\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示缓冲指示器\r\n   * 设置缓冲状态，隐藏覆盖播放按钮，并启动缓冲超时检测\r\n   */\r\n  showBuffering(): void {\r\n    if (this.isBuffering) return;\r\n\r\n    this.isBuffering = true;\r\n    this.showOverlayPlay = false;\r\n    this.clearBufferingTimeout();\r\n\r\n    // 设置超时检测\r\n    this.bufferingTimeout = setTimeout(() => {\r\n      if (this.isBuffering) {\r\n        this.handleVideoError('缓冲超时');\r\n      }\r\n    }, this.bufferingTimeoutDuration);\r\n  }\r\n\r\n  /**\r\n   * 隐藏缓冲指示器\r\n   * 重置缓冲状态并清理缓冲超时定时器\r\n   */\r\n  hideBuffering(): void {\r\n    this.isBuffering = false;\r\n    this.clearBufferingTimeout();\r\n  }\r\n\r\n  /**\r\n   * 清除缓冲超时定时器\r\n   * 取消缓冲超时检测，防止在缓冲恢复后触发错误处理\r\n   */\r\n  clearBufferingTimeout(): void {\r\n    if (this.bufferingTimeout) {\r\n      clearTimeout(this.bufferingTimeout);\r\n      this.bufferingTimeout = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新缓存显示\r\n   * 计算并更新缓冲范围、缓冲百分比等参数，用于UI显示\r\n   */\r\n  private updateBufferDisplay(): void {\r\n    if (!this.media?.nativeElement) return;\r\n\r\n    const video = this.media.nativeElement;\r\n    const currentTime = video.currentTime;\r\n    const duration = this.isLiveStream ? video.duration : this.totalDuration;\r\n\r\n    if (!isFinite(duration) || duration <= 0) return;\r\n\r\n    // 初始化缓冲范围\r\n    this.bufferedRanges = [];\r\n    let maxBufferEnd = 0;\r\n\r\n    // 获取缓冲范围\r\n    for (let i = 0; i < video.buffered.length; i++) {\r\n      const start = video.buffered.start(i);\r\n      const end = video.buffered.end(i);\r\n\r\n      // 计算最大缓冲范围\r\n      if (end > maxBufferEnd) {\r\n        maxBufferEnd = end;\r\n      }\r\n\r\n      // 添加到缓冲范围列表\r\n      this.bufferedRanges.push({ start, end });\r\n    }\r\n\r\n    // 计算缓冲百分比\r\n    this.bufferStart = currentTime;\r\n    this.bufferEnd = maxBufferEnd;\r\n\r\n    if (this.bufferEnd > 0 && duration > 0) {\r\n      this.bufferPercentage = (this.bufferEnd / duration) * 100;\r\n    }\r\n\r\n    // 强制更新UI\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * 开始缓冲更新计时器\r\n   * 设置定时更新缓冲状态的计时器，每500毫秒更新一次\r\n   */\r\n  private startBufferUpdateTimer(): void {\r\n    this.bufferUpdateInterval = setInterval(() => {\r\n      this.updateBufferDisplay();\r\n    }, 500);\r\n  }\r\n\r\n\r\n  /**\r\n   * 处理视频错误\r\n   * 设置错误状态，并根据重试次数决定是否进行重试\r\n   * @param message 错误信息（可选）\r\n   */\r\n  private handleVideoError(message?: string): void {\r\n    // 先清除缓冲超时定时器\r\n    this.clearBufferingTimeout();\r\n\r\n    // 检查是否需要重试\r\n    if (this.retryCount < this.maxRetries) {\r\n      // 设置为缓冲状态，不显示错误\r\n      this.isBuffering = true;\r\n      this.loadError = false;\r\n      this.showOverlayPlay = false;\r\n\r\n      // 增加重试计数\r\n      this.retryCount++;\r\n      console.log(`尝试重试加载 (${this.retryCount}/${this.maxRetries})`);\r\n\r\n      // 延迟重试\r\n      setTimeout(() => this.retryLoading(), 1000 * this.retryCount);\r\n    } else {\r\n      // 超出重试次数，显示错误界面\r\n      this.hideBuffering();\r\n      this.loadError = true;\r\n      this.showOverlayPlay = false;\r\n      this.retryCount = 0;\r\n      console.log('加载失败，显示错误界面');\r\n\r\n      // 强制更新UI，确保错误界面正确显示\r\n      this.cdr.detectChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重试加载当前HLS流\r\n   * 重置错误状态，尝试重新加载HLS流，如果失败则重新初始化播放器\r\n   */\r\n  retryLoading(): void {\r\n    // 重置错误状态，设置为缓冲状态\r\n    this.loadError = false;\r\n    this.isBuffering = true;\r\n\r\n    console.log('开始重试加载视频流...');\r\n\r\n    if (this.hls) {\r\n      try {\r\n        // 停止当前加载\r\n        this.hls.stopLoad();\r\n\r\n        // 清除之前的错误事件监听，避免重复触发\r\n        this.hls.off(Hls.Events.ERROR);\r\n\r\n        // 重新添加错误事件监听\r\n        this.hls.on(Hls.Events.ERROR, (event, data) => {\r\n          this.zone.run(() => {\r\n            this.handleHlsError(data);\r\n          });\r\n        });\r\n\r\n        // 设置超时检测，避免加载无响应\r\n        const retryTimeout = setTimeout(() => {\r\n          console.error('重试加载超时');\r\n          this.hideBuffering();\r\n          this.loadError = true;\r\n          this.retryCount = 0;\r\n        }, 3000);\r\n\r\n        // 监听清单加载成功，清除超时检测\r\n        const onManifestLoaded = () => {\r\n          clearTimeout(retryTimeout);\r\n          this.hls.off(Hls.Events.MANIFEST_LOADED, onManifestLoaded);\r\n        };\r\n\r\n        this.hls.on(Hls.Events.MANIFEST_LOADED, onManifestLoaded);\r\n\r\n        // 重新开始加载\r\n        this.hls.startLoad();\r\n\r\n        // 尝试恢复播放\r\n        setTimeout(() => {\r\n          if (this.api && this.api.state !== 'playing') {\r\n            try {\r\n              this.api.play();\r\n            } catch (e) {\r\n              console.error('恢复播放失败:', e);\r\n            }\r\n          }\r\n        }, 500);\r\n      } catch (e) {\r\n        console.error('重试加载失败:', e);\r\n        this.hideBuffering();\r\n        this.loadError = true;\r\n        this.retryCount = 0;\r\n      }\r\n    } else {\r\n      try {\r\n        // 如果HLS实例不存在，重新初始化\r\n        this.initializeHlsPlayer();\r\n      } catch (e) {\r\n        console.error('重新初始化播放器失败:', e);\r\n        this.hideBuffering();\r\n        this.loadError = true;\r\n        this.retryCount = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始拖动进度条\r\n   * 设置拖动状态并暂停播放，开始处理进度拖动\r\n   * @param event 鼠标事件对象，包含鼠标位置信息\r\n   */\r\n  startScrubbing(event: MouseEvent): void {\r\n    if (!this.api) return;\r\n\r\n    event.preventDefault();\r\n    this.isScrubbing = true;\r\n    this.wasPlaying = this.isPlaying;\r\n\r\n    if (this.wasPlaying) {\r\n      this.api.pause();\r\n    }\r\n\r\n    this.scrubStartX = event.clientX;\r\n    this.scrubStartPercentage = this.api.currentTime / this.api.duration;\r\n    this.handleGlobalMouseMove(event);\r\n  }\r\n\r\n  /**\r\n   * 处理全局鼠标移动事件\r\n   * 在拖动进度条时计算并更新当前的播放时间点\r\n   * @param event 鼠标事件对象，包含当前鼠标位置\r\n   */\r\n  private handleGlobalMouseMove(event: MouseEvent): void {\r\n    if (!this.isScrubbing || !this.api || !this.scrubBar) return;\r\n\r\n    const scrubBarEl = this.scrubBar.nativeElement;\r\n    const rect = scrubBarEl.getBoundingClientRect();\r\n    const position = Math.max(0, Math.min(rect.width, event.clientX - rect.left));\r\n    const percentage = position / rect.width;\r\n\r\n    // 设置当前时间\r\n    this.api.currentTime = percentage * (this.isLiveStream ? this.api.duration : this.totalDuration);\r\n  }\r\n\r\n  /**\r\n   * 处理全局鼠标释放事件\r\n   * 结束进度条拖动，恢复之前的播放状态\r\n   */\r\n  private handleGlobalMouseUp(): void {\r\n    if (this.isScrubbing) {\r\n      this.isScrubbing = false;\r\n      if (this.wasPlaying && this.api) {\r\n        this.api.play();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理全局键盘事件\r\n   * 根据按下的按键执行相应的播放器操作，如播放/暂停、快进/快退、全屏等\r\n   * @param event 键盘事件对象，包含按键信息\r\n   */\r\n  private handleGlobalKeyDown(event: KeyboardEvent): void {\r\n    const target = event.target as HTMLElement;\r\n    const tagName = target.tagName;\r\n\r\n    // 如果事件目标是输入元素（INPUT, TEXTAREA, SELECT）或者可编辑元素，则忽略 [6](@ref)\r\n    if (tagName === 'INPUT' || tagName === 'TEXTAREA' ||\r\n      tagName === 'SELECT' || target.isContentEditable) {\r\n      return;\r\n    }\r\n\r\n    // 处理ESC键 - 恢复所有模式到初始状态 [1,2,3,4](@ref)\r\n    if (event.key === 'Escape') {\r\n      this.resetAllModes();\r\n      this.resetControlBarTimer(); // 显示控制栏并重置计时器\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    // 原来的逻辑：如果事件目标是视频元素，则交给handleKeyEvents处理\r\n    if (event.target === this.media.nativeElement) {\r\n      this.handleKeyEvents(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始控制栏隐藏计时器\r\n   * 显示控制栏并设置定时器，在指定时间后自动隐藏控制栏\r\n   */\r\n  startControlBarTimer(): void {\r\n    if (this.controlHideTimeout) {\r\n      clearTimeout(this.controlHideTimeout);\r\n    }\r\n\r\n    this.controlHideTimeout = setTimeout(() => {\r\n      this.hideControls = true;\r\n    }, 3000);\r\n  }\r\n\r\n  /**\r\n   * 重置控制栏隐藏计时器\r\n   * 清除已存在的控制栏隐藏定时器，防止重复计时\r\n   */\r\n  resetControlBarTimer(): void {\r\n    this.hideControls = false;\r\n    this.startControlBarTimer();\r\n  }\r\n\r\n  /**\r\n   * 处理鼠标移动\r\n   * 当鼠标在播放器上移动时，显示控制栏并重置隐藏计时器\r\n   * @param event 鼠标事件对象\r\n   */\r\n  handleMouseMove(event: MouseEvent): void {\r\n    this.hideControls = false;\r\n    this.resetControlBarTimer();\r\n  }\r\n\r\n  /**\r\n   * 处理键盘事件\r\n   * @param event 键盘事件\r\n   */\r\n  handleKeyEvents(event: KeyboardEvent): void {\r\n    if (!this.api) return;\r\n\r\n    if (event.key === ' ') {\r\n      if (!this.spaceKeyDebounced) {\r\n        this.togglePlayback();\r\n        this.spaceKeyDebounced = true;\r\n        setTimeout(() => this.spaceKeyDebounced = false, 300);\r\n      }\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n    // 处理ESC键 - 恢复所有模式到初始状态 [1,2](@ref)\r\n    if (event.key === 'Escape') {\r\n      this.resetAllModes();\r\n      this.resetControlBarTimer(); // 显示控制栏并重置计时器\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    switch (event.key) {\r\n      case 'ArrowLeft':\r\n        this.api.currentTime = Math.max(0, this.api.currentTime - 5);\r\n        break;\r\n      case 'ArrowRight':\r\n        this.api.currentTime = Math.min(this.totalDuration, this.api.currentTime + 5);\r\n        break;\r\n      case 'ArrowUp':\r\n        this.volume = Math.min(1, this.volume + 0.05);\r\n        this.setVolume();\r\n        break;\r\n      case 'ArrowDown':\r\n        this.volume = Math.max(0, this.volume - 0.05);\r\n        this.setVolume();\r\n        break;\r\n      case 'm':\r\n      case 'M':\r\n        this.toggleMute();\r\n        break;\r\n      case 'f':\r\n      case 'F':\r\n        this.enterFullscreen();\r\n        break;\r\n      case 'w':\r\n      case 'W':\r\n        this.toggleWidescreen();\r\n        break;\r\n      case 't':\r\n      case 'T':\r\n        this.toggleTheaterMode();\r\n        break;\r\n      case '1':\r\n      case '2':\r\n      case '3':\r\n      case '4':\r\n      case '5':\r\n      case '6':\r\n      case '7':\r\n      case '8':\r\n      case '9':\r\n        const percent = parseInt(event.key) / 10;\r\n        this.api.currentTime = this.totalDuration * percent;\r\n        break;\r\n      case '>':\r\n        this.increaseSpeed();\r\n        break;\r\n      case '<':\r\n        this.decreaseSpeed();\r\n        break;\r\n      case '0':\r\n        this.api.currentTime = 0;\r\n        break;\r\n    }\r\n\r\n    this.resetControlBarTimer();\r\n  }\r\n\r\n  /**\r\n   * 切换播放状态\r\n   * 根据当前播放状态执行暂停或播放操作，如有加载错误则尝试重试\r\n   */\r\n  togglePlayback(): void {\r\n    if (this.api.state === 'playing') {\r\n      this.api.pause();\r\n    } else {\r\n      if (this.loadError) {\r\n        this.retryLoading();\r\n      } else {\r\n        this.api.play();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始播放\r\n   * 尝试播放视频内容，如有加载错误则进行重试\r\n   */\r\n  startPlayback(): void {\r\n    if (this.loadError) {\r\n      this.retryLoading();\r\n    } else {\r\n      this.api.play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 进入全屏模式\r\n   * 使用浏览器兼容的API请求全屏显示视频元素\r\n   */\r\n  enterFullscreen(): void {\r\n    const videoElement = this.media.nativeElement as any;\r\n\r\n    // 使用兼容的全屏API\r\n    if (typeof videoElement.requestFullscreen === 'function') {\r\n      videoElement.requestFullscreen();\r\n    }\r\n    // 为浏览器前缀添加兼容支持\r\n    else if (typeof videoElement.webkitRequestFullscreen === 'function') {\r\n      videoElement.webkitRequestFullscreen();\r\n    } else if (typeof videoElement.mozRequestFullScreen === 'function') {\r\n      videoElement.mozRequestFullScreen();\r\n    } else if (typeof videoElement.msRequestFullscreen === 'function') {\r\n      videoElement.msRequestFullscreen();\r\n    } else {\r\n      console.error('Fullscreen API not supported in this browser');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换宽屏模式\r\n   * 切换视频播放器的宽屏显示状态\r\n   */\r\n  toggleWidescreen(): void {\r\n    this.isWidescreen = !this.isWidescreen;\r\n  }\r\n\r\n  /**\r\n   * 切换关灯模式\r\n   * 切换播放器的关灯模式（影院模式），在该模式下会自动退出网页全屏\r\n   */\r\n  toggleTheaterMode(): void {\r\n    this.isTheaterMode = !this.isTheaterMode;\r\n    if (this.isTheaterMode && this.isWebFullscreen) {\r\n      this.toggleWebFullscreen();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换网页全屏\r\n   * 切换网页全屏模式，添加或移除全屏CSS类，在进入网页全屏时会自动退出影院模式\r\n   */\r\n  toggleWebFullscreen(): void {\r\n    this.isWebFullscreen = !this.isWebFullscreen;\r\n\r\n    if (this.isWebFullscreen) {\r\n      document.documentElement.classList.add('web-fullscreen');\r\n      if (this.isTheaterMode) {\r\n        this.isTheaterMode = false;\r\n      }\r\n    } else {\r\n      document.documentElement.classList.remove('web-fullscreen');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置音量\r\n   * 根据输入事件或当前音量值设置视频播放器的音量\r\n   * @param event 输入事件（可选），通常来自音量控制滑块\r\n   */\r\n  setVolume(event?: Event): void {\r\n    if (event) {\r\n      const target = event.target as HTMLInputElement;\r\n      this.volume = parseFloat(target.value);\r\n    }\r\n\r\n    if (this.api) {\r\n      this.api.volume = this.volume;\r\n      if (this.volume > 0 && this.isMuted) {\r\n        this.isMuted = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换静音\r\n   * 切换播放器的静音状态，同时保持原始音量值\r\n   */\r\n  toggleMute(): void {\r\n    this.isMuted = !this.isMuted;\r\n    if (this.api) {\r\n      this.api.volume = this.isMuted ? 0 : this.volume;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置播放速率\r\n   * 根据当前设置的播放速率值更新视频播放器的实际播放速度\r\n   */\r\n  setPlaybackRate(): void {\r\n    if (this.api) {\r\n      this.api.playbackRate = this.playbackRate;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 增加播放速度\r\n   * 将播放速度增加到预设速度选项中的下一个更高值\r\n   */\r\n  increaseSpeed(): void {\r\n    const currentIndex = this.speedOptions.findIndex(s => s.value === this.playbackRate);\r\n    if (currentIndex < this.speedOptions.length - 1) {\r\n      this.playbackRate = this.speedOptions[currentIndex + 1].value;\r\n      this.setPlaybackRate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 降低播放速度\r\n   * 将播放速度降低到预设速度选项中的下一个更低值\r\n   */\r\n  decreaseSpeed(): void {\r\n    const currentIndex = this.speedOptions.findIndex(s => s.value === this.playbackRate);\r\n    if (currentIndex > 0) {\r\n      this.playbackRate = this.speedOptions[currentIndex - 1].value;\r\n      this.setPlaybackRate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 选择视频质量\r\n   * 切换视频的播放质量，并重新初始化播放器以应用新的质量设置\r\n   * @param quality 质量选项对象，包含URL和其他质量相关信息\r\n   */\r\n  selectQuality(quality: any): void {\r\n    console.log('Selected quality:', quality);\r\n    console.log(\"修改清晰度\");\r\n\r\n    if (this.selectedQuality.url === quality.url) return;\r\n\r\n    this.selectedQuality = quality;\r\n    this.currentHlsUrl = quality.url;\r\n    this.showQualityOptions = false;\r\n\r\n    // 重新初始化播放器\r\n    this.initializeHlsPlayer();\r\n\r\n    // 预加载相邻质量\r\n    // this.preloadAdjacentQualities();\r\n  }\r\n\r\n  /**\r\n   * 选择播放速度\r\n   * 设置指定的播放速度并更新播放器状态，同时关闭速度选项菜单\r\n   * @param speed 播放速度值\r\n   */\r\n  selectSpeed(speed: number): void {\r\n    this.playbackRate = speed;\r\n    this.setPlaybackRate();\r\n    this.showSpeedOptions = false;\r\n  }\r\n\r\n  /**\r\n   * 获取速度标签\r\n   * 根据当前播放速度值获取对应的显示标签文本\r\n   * @returns 播放速度的显示标签\r\n   */\r\n  getSpeedLabel(): string {\r\n    const speedOption = this.speedOptions.find(s => s.value === this.playbackRate);\r\n    return speedOption ? speedOption.label : '正常';\r\n  }\r\n\r\n  /**\r\n   * 控制面板显示控制\r\n   * 处理控制面板组件的悬停或焦点进入事件，显示相应的控制选项\r\n   * @param controlType 控制类型，支持质量、速度或音量控制\r\n   */\r\n  onControlEnter(controlType: 'quality' | 'speed' | 'volume'): void {\r\n    if (this.controlDebounceTimers[controlType]) {\r\n      clearTimeout(this.controlDebounceTimers[controlType]);\r\n      this.controlDebounceTimers[controlType] = null;\r\n    }\r\n\r\n    switch (controlType) {\r\n      case 'quality':\r\n        this.showQualityOptions = true;\r\n        break;\r\n      case 'speed':\r\n        this.showSpeedOptions = true;\r\n        break;\r\n      case 'volume':\r\n        this.showVolumeSlider = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 控制面板隐藏控制\r\n   * 处理控制面板组件的悬停或焦点离开事件，设置定时器后隐藏相应的控制选项\r\n   * @param controlType 控制类型，支持质量、速度或音量控制\r\n   */\r\n  onControlLeave(controlType: 'quality' | 'speed' | 'volume'): void {\r\n    if (this.controlDebounceTimers[controlType]) {\r\n      clearTimeout(this.controlDebounceTimers[controlType]);\r\n    }\r\n\r\n    this.controlDebounceTimers[controlType] = setTimeout(() => {\r\n      switch (controlType) {\r\n        case 'quality':\r\n          this.showQualityOptions = false;\r\n          break;\r\n        case 'speed':\r\n          this.showSpeedOptions = false;\r\n          break;\r\n        case 'volume':\r\n          this.showVolumeSlider = false;\r\n          break;\r\n      }\r\n      this.controlDebounceTimers[controlType] = null;\r\n    }, 150);\r\n  }\r\n\r\n  /**\r\n   * 重置所有视图模式\r\n   * 恢复播放器的默认视图状态，包括关闭宽屏、影院模式，关闭所有菜单，退出全屏等\r\n   */\r\n  resetAllModes(): void {\r\n    this.isWidescreen = false;\r\n    this.isTheaterMode = false;\r\n\r\n    // 关闭所有弹出菜单\r\n    this.showQualityOptions = false;\r\n    this.showSpeedOptions = false;\r\n    this.showVolumeSlider = false;\r\n    this.showSettingsMenu = false;\r\n\r\n    // 退出网页全屏\r\n    if (this.isWebFullscreen) {\r\n      this.toggleWebFullscreen();\r\n    }\r\n\r\n    // 退出浏览器全屏\r\n    if (document.fullscreenElement) {\r\n      document.exitFullscreen();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理上下文菜单\r\n   * 阻止默认的右键上下文菜单显示，用于自定义播放器右键菜单\r\n   * @param event 鼠标事件对象\r\n   */\r\n  menu(event: Event): void {\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * 切换到下一个视频\r\n   * 实现简单的播放列表轮播功能，切换到下一个可用的视频质量选项\r\n   */\r\n  nextVideo(): void {\r\n    // 简单轮播播放列表\r\n    const currentIndex = this.availableQualities.findIndex(\r\n      q => q.url === this.selectedQuality.url\r\n    );\r\n\r\n    if (currentIndex >= 0) {\r\n      const nextIndex = (currentIndex + 1) % this.availableQualities.length;\r\n      this.selectedQuality = this.availableQualities[nextIndex];\r\n      this.currentHlsUrl = this.selectedQuality.url;\r\n      this.initializeHlsPlayer();\r\n    }\r\n  }\r\n\r\n\r\n  /**************************************************************************/\r\n  /*                                                                        */\r\n  /*                  新增HLS相关事件处理函数                                */\r\n  /*                                                                        */\r\n\r\n  /**************************************************************************/\r\n\r\n  /**\r\n   * 视频准备就绪事件\r\n   * 处理视频可以开始播放的事件，隐藏缓冲指示器，检测流类型并更新视频时长\r\n   * @param event 事件对象\r\n   */\r\n  onCanPlay(event: Event): void {\r\n    this.hideBuffering();\r\n    this.loadError = false;\r\n\r\n    // 检测视频流类型\r\n    this.detectStreamType();\r\n\r\n    // 更新总时长\r\n    if (!this.isLiveStream && this.api) {\r\n      this.totalDuration = this.api.duration;\r\n    }\r\n\r\n    // 更新缓冲显示\r\n    this.updateBufferDisplay();\r\n  }\r\n\r\n  /**\r\n   * 视频错误事件\r\n   * 处理视频播放过程中的错误事件，记录错误信息并执行相应的错误处理\r\n   * @param event 事件对象\r\n   */\r\n  onVideoError(event: Event): void {\r\n    console.error('Video error:', (event.target as HTMLVideoElement).error);\r\n    console.log(\"视频播放错误\")\r\n    this.handleVideoError('视频播放错误');\r\n  }\r\n\r\n  /**\r\n   * 视频缓冲停滞事件\r\n   * @param event 事件对象\r\n   */\r\n  onStalled(event: Event): void {\r\n    this.showBuffering();\r\n  }\r\n\r\n  /**\r\n   * 视频缓冲恢复事件\r\n   * @param event 事件对象\r\n   */\r\n  onPlaying(event: Event): void {\r\n    this.hideBuffering();\r\n  }\r\n\r\n  /**\r\n   * 视频缓冲开始事件\r\n   * @param event 事件对象\r\n   */\r\n  onWaiting(event: Event): void {\r\n    this.showBuffering();\r\n  }\r\n\r\n  /**\r\n   * 视频缓冲进度事件\r\n   * @param event 事件对象\r\n   */\r\n  onProgress(event: Event): void {\r\n    this.updateBufferDisplay();\r\n  }\r\n}\r\n","<!-- videogular.component.html -->\n<div class=\"video-container\" [class.theater-mode]=\"isTheaterMode\" [class.widescreen]=\"isWidescreen\"\n  (mousemove)=\"handleMouseMove($event)\" (mouseleave)=\"hideControls=true\" (contextmenu)=\"menu($event)\">\n  <!-- 关灯模式蒙层 -->\n  <div class=\"dark-overlay\" *ngIf=\"isTheaterMode\"></div>\n\n  <vg-player (onPlayerReady)=\"onPlayerReady($event)\" #mediaPlayer tabindex=\"0\" (keydown)=\"handleKeyEvents($event)\"\n    [class.hide-controls]=\"hideControls\">\n    <!-- 视频主体 -->\n    <video [vgMedia]=\"$any(media)\" #media id=\"mainVideo\" preload=\"auto\" crossorigin=\"anonymous\" autoplay muted\n      playsinline [poster]=\"posterImage\" (canplay)=\"onCanPlay($event)\"\n      (error)=\"onVideoError($event)\" (stalled)=\"onStalled($event)\" (progress)=\"onProgress($event)\"\n      (waiting)=\"onWaiting($event)\" (playing)=\"onPlaying($event)\">\n      <!-- 仅保留一个source元素用于HLS -->\n      <source [src]=\"currentHlsUrl\" type=\"application/x-mpegURL\">\n    </video>\n\n    <!-- 播放器覆盖层 -->\n    <vg-overlay-play *ngIf=\"showOverlayPlay\" (click)=\"togglePlayback()\"></vg-overlay-play>\n\n    <!-- 自定义缓冲指示器 -->\n    <div class=\"custom-buffering\" *ngIf=\"isBuffering\">\n      <div class=\"spinner\"></div>\n      <div class=\"buffering-text\">加载中...</div>\n    </div>\n\n    <!-- 加载失败提示 -->\n    <div class=\"load-error\" *ngIf=\"loadError\">\n      <div class=\"error-icon\">❌</div>\n      <div class=\"error-text\">视频加载失败</div>\n      <button class=\"retry-button\" (click)=\"retryLoading()\">重试</button>\n    </div>\n\n    <!-- 播放器控制界面 -->\n    <vg-controls>\n      <!-- 顶部进度条 -->\n      <vg-scrub-bar class=\"top-scrub-bar\" #scrubBar (mousedown)=\"startScrubbing($event)\">\n        <vg-scrub-bar-current-time></vg-scrub-bar-current-time>\n      </vg-scrub-bar>\n\n      <!-- 控制栏主体 -->\n      <div class=\"controls-container\">\n        <!-- 左侧控制组 -->\n        <div class=\"left-controls\">\n          <!-- 播放/暂停按钮 -->\n          <vg-play-pause></vg-play-pause>\n\n          <!-- 下一个按钮 -->\n          <button class=\"next-button\" (click)=\"nextVideo()\" title=\"下一个\">\n            <i>⏭️</i>\n          </button>\n\n          <!-- 时间显示 -->\n          <div class=\"time-display\">\n            <vg-time-display vgProperty=\"current\" vgFormat=\"mm:ss\"></vg-time-display>\n            <span>/</span>\n            <vg-time-display vgProperty=\"total\" vgFormat=\"mm:ss\"></vg-time-display>\n          </div>\n        </div>\n\n        <!-- 右侧控制组 -->\n        <div class=\"right-controls\">\n          <!-- 清晰度控制 -->\n          <div class=\"quality-control\" (mouseenter)=\"onControlEnter('quality')\"\n            (mouseleave)=\"onControlLeave('quality')\">\n            <div class=\"quality-trigger\">{{ selectedQuality.label }}</div>\n            <div class=\"quality-dropdown\" *ngIf=\"showQualityOptions\" [class.upward]=\"true\">\n              <ul>\n                <li *ngFor=\"let quality of availableQualities\" (click)=\"selectQuality(quality)\"\n                  [class.active]=\"quality.url === selectedQuality.url\">\n                  {{ quality.label }}\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <!-- 倍速控制 -->\n          <div class=\"speed-control\" (mouseenter)=\"onControlEnter('speed')\" (mouseleave)=\"onControlLeave('speed')\">\n            <div class=\"speed-trigger\">{{ getSpeedLabel() }}</div>\n            <div class=\"speed-dropdown\" *ngIf=\"showSpeedOptions\" [class.upward]=\"true\">\n              <ul>\n                <li *ngFor=\"let speed of speedOptions\" (click)=\"selectSpeed(speed.value)\"\n                  [class.active]=\"speed.value === playbackRate\">\n                  {{ speed.label }}\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <!-- 音量控制 -->\n          <div class=\"volume-control\" (mouseenter)=\"onControlEnter('volume')\" (mouseleave)=\"onControlLeave('volume')\">\n            <button (click)=\"toggleMute()\" class=\"volume-button\">\n              <i *ngIf=\"!isMuted\" class=\"volume-icon\">🔊</i>\n              <i *ngIf=\"isMuted\" class=\"volume-icon\">🔇</i>\n            </button>\n            <div class=\"volume-slider-vertical\" *ngIf=\"showVolumeSlider\">\n              <input type=\"range\" min=\"0\" max=\"1\" step=\"0.05\" [(ngModel)]=\"volume\" (input)=\"setVolume($event)\"\n                class=\"volume-slider-vertical-input\">\n            </div>\n          </div>\n\n          <!-- 设置按钮 -->\n          <div class=\"s-c\">\n            <button class=\"s-b\" title=\"设置\">\n              <i>⚙️</i>\n            </button>\n            <div class=\"s-d\">\n              <!-- 设置菜单标题 -->\n              <div class=\"s-h\">\n                <h4>播放设置</h4>\n              </div>\n              \n              <!-- 设置选项组 -->\n              <div class=\"s-g\">\n                <h5>视图模式</h5>\n                <div class=\"s-grid\">\n                  <button (click)=\"toggleWidescreen()\" [class.active]=\"isWidescreen\" title=\"宽屏模式\">\n                    <i class=\"s-i\">🖥️</i>\n                    <span>宽屏模式</span>\n                  </button>\n                  <button (click)=\"toggleWebFullscreen()\" [class.active]=\"isWebFullscreen\" title=\"网页全屏\">\n                    <i class=\"s-i\">📱</i>\n                    <span>网页全屏</span>\n                  </button>\n                  <button (click)=\"toggleTheaterMode()\" [class.active]=\"isTheaterMode\" title=\"关灯模式\">\n                    <i class=\"s-i\">🌙</i>\n                    <span>关灯模式</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- 全屏模式 -->\n          <vg-fullscreen (click)=\"enterFullscreen()\"></vg-fullscreen>\n        </div>\n      </div>\n    </vg-controls>\n  </vg-player>\n\n  <!-- 键盘快捷键提示 -->\n  <div class=\"keyboard-hint\">\n    <span>空格:播放/暂停</span>\n    <span>←→:快进/快退</span>\n    <span>↑↓:音量调节</span>\n    <span>1-9:跳转进度</span>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { VgCoreModule } from '@videogular/ngx-videogular/core';\nimport { VgControlsModule } from '@videogular/ngx-videogular/controls';\nimport { VgOverlayPlayModule } from '@videogular/ngx-videogular/overlay-play';\nimport { VgBufferingModule } from '@videogular/ngx-videogular/buffering';\nimport { Videogular } from './videogular';\n\n/**\n * FmodeVideoModule 提供视频播放器组件的NgModule包装\n * 适用于传统的Angular模块系统\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    VgCoreModule,\n    VgControlsModule,\n    VgOverlayPlayModule,\n    VgBufferingModule,\n    Videogular // 对于standalone组件，应该直接导入而不是声明\n  ],\n  exports: [Videogular]\n})\nexport class FmodeVideoModule { }","/*\r\n * Public API Surface of fmode-video\r\n */\r\n\r\nexport * from './lib/videogular';\r\nexport * from './lib/videogular.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}