import * as i0 from '@angular/core';
import { ViewChild, Component, NgModule } from '@angular/core';
import * as i1 from '@videogular/ngx-videogular/core';
import { VgCoreModule } from '@videogular/ngx-videogular/core';
import * as i2 from '@videogular/ngx-videogular/controls';
import { VgControlsModule } from '@videogular/ngx-videogular/controls';
import * as i3 from '@videogular/ngx-videogular/overlay-play';
import { VgOverlayPlayModule } from '@videogular/ngx-videogular/overlay-play';
import { VgBufferingModule } from '@videogular/ngx-videogular/buffering';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import Hls from 'hls.js';

/**
 * 视频播放器组件 (使用HLS实现)
 * @remarks
 * 基于HLS.js实现大厂级别的视频播放功能，包括：
 * 1. 支持HLS流媒体播放
 * 2. 智能预加载和缓存管理
 * 3. 自适应码率切换
 * 4. 多种视图模式（宽屏/关灯/无黑边）
 *
 * 注意：本组件已完全重构以支持HLS协议
 *
 * @example
 * <app-videogular [videoSources]="hlsSources"></app-videogular>
 */
class Videogular {
    renderer;
    cdr;
    zone;
    /** 播放器API实例 */
    api;
    /** HLS实例 */
    hls;
    /** 播放器DOM元素引用 */
    player;
    media;
    scrubBar;
    // 状态控制变量
    /**
     * 是否正在播放
     */
    isPlaying = false;
    /**
     * 是否显示覆盖播放按钮
     */
    showOverlayPlay = true;
    /**
     * 是否隐藏控制栏
     */
    hideControls = false;
    /**
     * 是否正在缓冲
     */
    isBuffering = false;
    /**
     * 是否加载错误
     */
    loadError = false;
    /**
     * 是否为直播流
     */
    isLiveStream = false;
    // 音频控制
    /**
     * 音量大小 (0-1)
     */
    volume = 1.0;
    /**
     * 是否静音
     */
    isMuted = false;
    // 播放控制
    /**
     * 播放速率
     */
    playbackRate = 1.0;
    /**
     * 播放进度百分比
     */
    progress = 0;
    /**
     * 缓冲百分比
     */
    bufferPercentage = 0;
    /**
     * 缓冲区间列表
     */
    bufferedRanges = [];
    /**
     * 缓冲开始时间
     */
    bufferStart = 0;
    /**
     * 缓冲结束时间
     */
    bufferEnd = 0;
    /**
     * 视频总时长
     */
    totalDuration = 0;
    // 视图模式
    /**
     * 是否为宽屏模式
     */
    isWidescreen = false;
    /**
     * 是否为关灯模式
     */
    isTheaterMode = false;
    /**
     * 是否为网页全屏
     */
    isWebFullscreen = false;
    // 控制面板状态
    /**
     * 是否显示音量滑块
     */
    showVolumeSlider = false;
    /**
     * 是否显示画质选项
     */
    showQualityOptions = false;
    /**
     * 是否显示播放速度选项
     */
    showSpeedOptions = false;
    /**
     * 是否显示设置菜单
     */
    showSettingsMenu = false;
    // 播放选项
    /**
     * 播放速度选项列表
     */
    speedOptions = [
        { label: '2.0x', value: 2.0 },
        { label: '1.5x', value: 1.5 },
        { label: '1.25x', value: 1.25 },
        { label: '正常', value: 1.0 },
        { label: '0.75x', value: 0.75 },
        { label: '0.5x', value: 0.5 }
    ];
    // HLS源配置
    /**
     * 视频封面图
     */
    posterImage = 'assets/images/video-thumbnail.jpg';
    /**
     * 当前选择的画质
     */
    selectedQuality;
    /**
     * 可用画质列表
     */
    availableQualities = [];
    /**
     * 当前HLS流URL
     */
    currentHlsUrl = '';
    /**
     * HLS质量级别列表
     */
    hlsLevels = [];
    // HLS配置参数
    /**
     * HLS配置选项
     */
    hlsConfig = {
        maxBufferLength: 30, // 最大缓冲长度(秒)
        maxMaxBufferLength: 60, // 最大缓冲长度上限
        maxBufferSize: 60 * 1000 * 1000, // 最大缓冲大小(60MB)
        highBufferWatchdogPeriod: 1, // 监控缓冲状态的时间间隔
        enableWorker: true, // 启用Web Worker
        lowLatencyMode: true, // 低延迟模式
        backBufferLength: 5, // 保留的缓冲长度
        testBandwidth: true, // 启用带宽检测
        debug: false, // 禁用调试日志
        fragLoadingRetryDelay: 500, // 片段加载失败重试延时(ms)
        manifestLoadingTimeOut: 10000 // 播放列表加载超时时间(ms)
    };
    // 预加载相关变量
    /**
     * 是否正在预加载
     */
    isPreloading = false;
    // 内部状态管理
    /**
     * 控制栏隐藏定时器
     */
    controlHideTimeout;
    /**
     * 空格键防抖标记
     */
    spaceKeyDebounced = false;
    /**
     * 是否正在拖动进度条
     */
    isScrubbing = false;
    /**
     * 拖动开始时的鼠标X坐标
     */
    scrubStartX = 0;
    /**
     * 拖动开始时的播放百分比
     */
    scrubStartPercentage = 0;
    /**
     * 拖动前是否正在播放
     */
    wasPlaying = false;
    /**
     * 控制面板防抖定时器集合
     */
    controlDebounceTimers = {};
    /**
     * 当前重试次数
     */
    retryCount = 0;
    /**
     * 最大重试次数
     */
    maxRetries = 1;
    /**
     * 缓冲超时定时器
     */
    bufferingTimeout;
    /**
     * 缓冲超时持续时间(毫秒)
     */
    bufferingTimeoutDuration = 3000;
    /**
     * 缓冲更新计时器
     */
    bufferUpdateInterval;
    /**
     * 组件构造函数
     * @param renderer Angular渲染器，用于操作DOM元素
     * @param cdr 变更检测器，用于强制刷新UI
     * @param zone Angular区域，用于管理异步操作
     */
    constructor(renderer, cdr, zone) {
        this.renderer = renderer;
        this.cdr = cdr;
        this.zone = zone;
    }
    /**
     * 组件初始化钩子
     * 初始化HLS源列表和默认选中的画质
     */
    ngOnInit() {
        // 初始化HLS源列表
        this.availableQualities = [
            { label: '超清 1080p', url: 'public/video/1.m3u8', bitrate: 5000 },
            { label: '高清 720p', url: 'public/video/1.m3u8', bitrate: 2500 },
            { label: '标清 480p', url: 'public/video/1.m3u8', bitrate: 1000 },
            { label: '流畅 360p', url: 'public/video/2.m3u8', bitrate: 500 },
        ];
        this.selectedQuality = this.availableQualities[3];
        this.currentHlsUrl = this.selectedQuality.url;
    }
    /**
     * 视图初始化完成钩子
     * 设置全局事件监听器并初始化HLS播放器
     */
    ngAfterViewInit() {
        this.setupGlobalListeners();
        this.initializeHlsPlayer();
    }
    /**
     * 组件销毁钩子
     * 清理所有资源，包括定时器和HLS实例
     */
    ngOnDestroy() {
        this.cleanupResources();
    }
    /**
     * 初始化HLS播放器
     * 创建并配置HLS实例，加载视频源，设置事件监听
     */
    initializeHlsPlayer() {
        const videoElement = this.media.nativeElement;
        // 清理已有HLS实例
        if (this.hls) {
            this.hls.destroy();
        }
        // 创建新的HLS实例
        this.hls = new Hls(this.hlsConfig);
        // 绑定到video元素
        this.hls.attachMedia(videoElement);
        // 设置初始视频源
        this.hls.loadSource(this.currentHlsUrl);
        // 设置HLS事件监听器
        this.setupHlsEvents();
        // 延迟检测状态
        setTimeout(() => this.detectStreamType(), 1000);
        // 开始缓冲更新计时器
        this.startBufferUpdateTimer();
    }
    /**
     * 设置HLS事件监听器
     * 为HLS实例添加各种事件的监听器，处理播放列表加载、缓冲、错误等情况
     */
    setupHlsEvents() {
        if (!this.hls)
            return;
        // 监听播放列表加载事件
        this.hls.on(Hls.Events.MANIFEST_LOADED, (event, data) => {
            this.zone.run(() => {
                // 获取所有质量级别
                this.hlsLevels = data.levels || [];
                // 重置播放器状态
                this.loadError = false;
                this.isBuffering = false;
                // 检测是否为直播流
                this.detectStreamType();
            });
        });
        // 监听片段加载事件
        this.hls.on(Hls.Events.FRAG_LOADED, (event, data) => {
            // 可在此处添加数据收集点，用于分析加载性能
        });
        // 监听缓冲事件
        this.hls.on(Hls.Events.BUFFER_CREATED, () => {
            // 触发缓冲状态更新
            this.updateBufferDisplay();
        });
        // 监听缓冲进度
        this.hls.on(Hls.Events.BUFFER_APPENDING, () => {
            // 触发缓冲状态更新
            this.updateBufferDisplay();
        });
        // 监听错误事件
        this.hls.on(Hls.Events.ERROR, (event, data) => {
            this.zone.run(() => {
                // 处理缓冲停滞错误
                if (data.details === Hls.ErrorDetails.BUFFER_STALLED_ERROR) {
                    this.showBuffering();
                }
                this.handleHlsError(data);
            });
        });
        // 监听缓冲结束事件
        this.hls.on(Hls.Events.BUFFER_APPENDED, () => {
            this.zone.run(() => {
                this.hideBuffering();
                this.clearBufferingTimeout();
            });
        });
    }
    /**
     * 设置全局事件监听器
     * 为文档添加全局鼠标和键盘事件监听器，用于处理进度条拖动和全局快捷键
     */
    setupGlobalListeners() {
        this.renderer.listen('document', 'mousemove', (event) => this.handleGlobalMouseMove(event));
        this.renderer.listen('document', 'mouseup', () => this.handleGlobalMouseUp());
        this.renderer.listen('document', 'keydown', (event) => this.handleGlobalKeyDown(event));
    }
    /**
     * 检测视频流类型（直播/点播）
     * 根据视频的duration属性判断是直播流还是点播视频
     */
    detectStreamType() {
        if (!this.media?.nativeElement)
            return;
        const duration = this.media.nativeElement.duration;
        if (duration === Infinity || duration === 0) {
            this.isLiveStream = true;
        }
        else {
            this.isLiveStream = false;
            this.totalDuration = duration;
        }
    }
    /**
     * 清理资源
     * 在组件销毁时清理所有定时器、HLS实例和其他资源，防止内存泄漏
     */
    cleanupResources() {
        // 清理定时器
        if (this.controlHideTimeout)
            clearTimeout(this.controlHideTimeout);
        if (this.bufferingTimeout)
            clearTimeout(this.bufferingTimeout);
        if (this.bufferUpdateInterval)
            clearInterval(this.bufferUpdateInterval);
        // 清理HLS实例
        if (this.hls) {
            this.hls.stopLoad();
            this.hls.detachMedia();
            this.hls.destroy();
        }
        // 清理控制面板防抖定时器
        Object.keys(this.controlDebounceTimers).forEach(key => {
            if (this.controlDebounceTimers[key]) {
                clearTimeout(this.controlDebounceTimers[key]);
            }
        });
    }
    /**
     * 播放器准备就绪回调
     * 当Videogular播放器初始化完成后调用，设置初始状态和事件监听
     * @param api 视频播放器API实例
     */
    onPlayerReady(api) {
        this.api = api;
        this.api.volume = this.volume;
        this.api.volume = 0; // 初始设置为静音
        this.api.playbackRate = this.playbackRate;
        this.api.play();
        // 监听播放事件
        this.api.getDefaultMedia().subscriptions.play.subscribe(() => {
            this.isPlaying = true;
            this.showOverlayPlay = true;
        });
        // 监听暂停事件
        this.api.getDefaultMedia().subscriptions.pause.subscribe(() => {
            this.isPlaying = false;
            if (!this.isBuffering && !this.loadError) {
                this.showOverlayPlay = true;
            }
        });
        // 开始控制栏隐藏计时器
        this.startControlBarTimer();
    }
    /**
     * 处理HLS错误
     * 根据不同类型的HLS错误采取相应的处理措施，如重试加载或显示错误信息
     * @param data 错误数据，包含错误详情和类型
     */
    handleHlsError(data) {
        console.error('HLS Error:', data.details);
        // 统一使用handleVideoError处理所有类型的错误，确保一致的重试逻辑
        switch (data.details) {
            case Hls.ErrorDetails.MANIFEST_LOAD_ERROR:
            case Hls.ErrorDetails.MANIFEST_LOAD_TIMEOUT:
                // 播放列表加载错误
                this.handleVideoError('播放列表加载失败');
                break;
            case Hls.ErrorDetails.FRAG_LOAD_ERROR:
            case Hls.ErrorDetails.FRAG_LOAD_TIMEOUT:
                // 片段加载错误
                this.handleVideoError('视频片段加载失败');
                break;
            case Hls.ErrorDetails.BUFFER_STALLED_ERROR:
                // 缓冲停滞错误
                // 注意：这个错误是在监听器中特别处理的，这里不再重复处理
                break;
            default:
                console.log("其他错误");
                this.handleVideoError('视频播放错误');
                break;
        }
    }
    /**
     * 显示缓冲指示器
     * 设置缓冲状态，隐藏覆盖播放按钮，并启动缓冲超时检测
     */
    showBuffering() {
        if (this.isBuffering)
            return;
        this.isBuffering = true;
        this.showOverlayPlay = false;
        this.clearBufferingTimeout();
        // 设置超时检测
        this.bufferingTimeout = setTimeout(() => {
            if (this.isBuffering) {
                this.handleVideoError('缓冲超时');
            }
        }, this.bufferingTimeoutDuration);
    }
    /**
     * 隐藏缓冲指示器
     * 重置缓冲状态并清理缓冲超时定时器
     */
    hideBuffering() {
        this.isBuffering = false;
        this.clearBufferingTimeout();
    }
    /**
     * 清除缓冲超时定时器
     * 取消缓冲超时检测，防止在缓冲恢复后触发错误处理
     */
    clearBufferingTimeout() {
        if (this.bufferingTimeout) {
            clearTimeout(this.bufferingTimeout);
            this.bufferingTimeout = null;
        }
    }
    /**
     * 更新缓存显示
     * 计算并更新缓冲范围、缓冲百分比等参数，用于UI显示
     */
    updateBufferDisplay() {
        if (!this.media?.nativeElement)
            return;
        const video = this.media.nativeElement;
        const currentTime = video.currentTime;
        const duration = this.isLiveStream ? video.duration : this.totalDuration;
        if (!isFinite(duration) || duration <= 0)
            return;
        // 初始化缓冲范围
        this.bufferedRanges = [];
        let maxBufferEnd = 0;
        // 获取缓冲范围
        for (let i = 0; i < video.buffered.length; i++) {
            const start = video.buffered.start(i);
            const end = video.buffered.end(i);
            // 计算最大缓冲范围
            if (end > maxBufferEnd) {
                maxBufferEnd = end;
            }
            // 添加到缓冲范围列表
            this.bufferedRanges.push({ start, end });
        }
        // 计算缓冲百分比
        this.bufferStart = currentTime;
        this.bufferEnd = maxBufferEnd;
        if (this.bufferEnd > 0 && duration > 0) {
            this.bufferPercentage = (this.bufferEnd / duration) * 100;
        }
        // 强制更新UI
        this.cdr.detectChanges();
    }
    /**
     * 开始缓冲更新计时器
     * 设置定时更新缓冲状态的计时器，每500毫秒更新一次
     */
    startBufferUpdateTimer() {
        this.bufferUpdateInterval = setInterval(() => {
            this.updateBufferDisplay();
        }, 500);
    }
    /**
     * 处理视频错误
     * 设置错误状态，并根据重试次数决定是否进行重试
     * @param message 错误信息（可选）
     */
    handleVideoError(message) {
        // 先清除缓冲超时定时器
        this.clearBufferingTimeout();
        // 检查是否需要重试
        if (this.retryCount < this.maxRetries) {
            // 设置为缓冲状态，不显示错误
            this.isBuffering = true;
            this.loadError = false;
            this.showOverlayPlay = false;
            // 增加重试计数
            this.retryCount++;
            console.log(`尝试重试加载 (${this.retryCount}/${this.maxRetries})`);
            // 延迟重试
            setTimeout(() => this.retryLoading(), 1000 * this.retryCount);
        }
        else {
            // 超出重试次数，显示错误界面
            this.hideBuffering();
            this.loadError = true;
            this.showOverlayPlay = false;
            this.retryCount = 0;
            console.log('加载失败，显示错误界面');
            // 强制更新UI，确保错误界面正确显示
            this.cdr.detectChanges();
        }
    }
    /**
     * 重试加载当前HLS流
     * 重置错误状态，尝试重新加载HLS流，如果失败则重新初始化播放器
     */
    retryLoading() {
        // 重置错误状态，设置为缓冲状态
        this.loadError = false;
        this.isBuffering = true;
        console.log('开始重试加载视频流...');
        if (this.hls) {
            try {
                // 停止当前加载
                this.hls.stopLoad();
                // 清除之前的错误事件监听，避免重复触发
                this.hls.off(Hls.Events.ERROR);
                // 重新添加错误事件监听
                this.hls.on(Hls.Events.ERROR, (event, data) => {
                    this.zone.run(() => {
                        this.handleHlsError(data);
                    });
                });
                // 设置超时检测，避免加载无响应
                const retryTimeout = setTimeout(() => {
                    console.error('重试加载超时');
                    this.hideBuffering();
                    this.loadError = true;
                    this.retryCount = 0;
                }, 3000);
                // 监听清单加载成功，清除超时检测
                const onManifestLoaded = () => {
                    clearTimeout(retryTimeout);
                    this.hls.off(Hls.Events.MANIFEST_LOADED, onManifestLoaded);
                };
                this.hls.on(Hls.Events.MANIFEST_LOADED, onManifestLoaded);
                // 重新开始加载
                this.hls.startLoad();
                // 尝试恢复播放
                setTimeout(() => {
                    if (this.api && this.api.state !== 'playing') {
                        try {
                            this.api.play();
                        }
                        catch (e) {
                            console.error('恢复播放失败:', e);
                        }
                    }
                }, 500);
            }
            catch (e) {
                console.error('重试加载失败:', e);
                this.hideBuffering();
                this.loadError = true;
                this.retryCount = 0;
            }
        }
        else {
            try {
                // 如果HLS实例不存在，重新初始化
                this.initializeHlsPlayer();
            }
            catch (e) {
                console.error('重新初始化播放器失败:', e);
                this.hideBuffering();
                this.loadError = true;
                this.retryCount = 0;
            }
        }
    }
    /**
     * 开始拖动进度条
     * 设置拖动状态并暂停播放，开始处理进度拖动
     * @param event 鼠标事件对象，包含鼠标位置信息
     */
    startScrubbing(event) {
        if (!this.api)
            return;
        event.preventDefault();
        this.isScrubbing = true;
        this.wasPlaying = this.isPlaying;
        if (this.wasPlaying) {
            this.api.pause();
        }
        this.scrubStartX = event.clientX;
        this.scrubStartPercentage = this.api.currentTime / this.api.duration;
        this.handleGlobalMouseMove(event);
    }
    /**
     * 处理全局鼠标移动事件
     * 在拖动进度条时计算并更新当前的播放时间点
     * @param event 鼠标事件对象，包含当前鼠标位置
     */
    handleGlobalMouseMove(event) {
        if (!this.isScrubbing || !this.api || !this.scrubBar)
            return;
        const scrubBarEl = this.scrubBar.nativeElement;
        const rect = scrubBarEl.getBoundingClientRect();
        const position = Math.max(0, Math.min(rect.width, event.clientX - rect.left));
        const percentage = position / rect.width;
        // 设置当前时间
        this.api.currentTime = percentage * (this.isLiveStream ? this.api.duration : this.totalDuration);
    }
    /**
     * 处理全局鼠标释放事件
     * 结束进度条拖动，恢复之前的播放状态
     */
    handleGlobalMouseUp() {
        if (this.isScrubbing) {
            this.isScrubbing = false;
            if (this.wasPlaying && this.api) {
                this.api.play();
            }
        }
    }
    /**
     * 处理全局键盘事件
     * 根据按下的按键执行相应的播放器操作，如播放/暂停、快进/快退、全屏等
     * @param event 键盘事件对象，包含按键信息
     */
    handleGlobalKeyDown(event) {
        const target = event.target;
        const tagName = target.tagName;
        // 如果事件目标是输入元素（INPUT, TEXTAREA, SELECT）或者可编辑元素，则忽略 [6](@ref)
        if (tagName === 'INPUT' || tagName === 'TEXTAREA' ||
            tagName === 'SELECT' || target.isContentEditable) {
            return;
        }
        // 处理ESC键 - 恢复所有模式到初始状态 [1,2,3,4](@ref)
        if (event.key === 'Escape') {
            this.resetAllModes();
            this.resetControlBarTimer(); // 显示控制栏并重置计时器
            event.preventDefault();
            event.stopPropagation();
            return;
        }
        // 原来的逻辑：如果事件目标是视频元素，则交给handleKeyEvents处理
        if (event.target === this.media.nativeElement) {
            this.handleKeyEvents(event);
        }
    }
    /**
     * 开始控制栏隐藏计时器
     * 显示控制栏并设置定时器，在指定时间后自动隐藏控制栏
     */
    startControlBarTimer() {
        if (this.controlHideTimeout) {
            clearTimeout(this.controlHideTimeout);
        }
        this.controlHideTimeout = setTimeout(() => {
            this.hideControls = true;
        }, 3000);
    }
    /**
     * 重置控制栏隐藏计时器
     * 清除已存在的控制栏隐藏定时器，防止重复计时
     */
    resetControlBarTimer() {
        this.hideControls = false;
        this.startControlBarTimer();
    }
    /**
     * 处理鼠标移动
     * 当鼠标在播放器上移动时，显示控制栏并重置隐藏计时器
     * @param event 鼠标事件对象
     */
    handleMouseMove(event) {
        this.hideControls = false;
        this.resetControlBarTimer();
    }
    /**
     * 处理键盘事件
     * @param event 键盘事件
     */
    handleKeyEvents(event) {
        if (!this.api)
            return;
        if (event.key === ' ') {
            if (!this.spaceKeyDebounced) {
                this.togglePlayback();
                this.spaceKeyDebounced = true;
                setTimeout(() => this.spaceKeyDebounced = false, 300);
            }
            event.preventDefault();
            return;
        }
        // 处理ESC键 - 恢复所有模式到初始状态 [1,2](@ref)
        if (event.key === 'Escape') {
            this.resetAllModes();
            this.resetControlBarTimer(); // 显示控制栏并重置计时器
            event.preventDefault();
            return;
        }
        switch (event.key) {
            case 'ArrowLeft':
                this.api.currentTime = Math.max(0, this.api.currentTime - 5);
                break;
            case 'ArrowRight':
                this.api.currentTime = Math.min(this.totalDuration, this.api.currentTime + 5);
                break;
            case 'ArrowUp':
                this.volume = Math.min(1, this.volume + 0.05);
                this.setVolume();
                break;
            case 'ArrowDown':
                this.volume = Math.max(0, this.volume - 0.05);
                this.setVolume();
                break;
            case 'm':
            case 'M':
                this.toggleMute();
                break;
            case 'f':
            case 'F':
                this.enterFullscreen();
                break;
            case 'w':
            case 'W':
                this.toggleWidescreen();
                break;
            case 't':
            case 'T':
                this.toggleTheaterMode();
                break;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                const percent = parseInt(event.key) / 10;
                this.api.currentTime = this.totalDuration * percent;
                break;
            case '>':
                this.increaseSpeed();
                break;
            case '<':
                this.decreaseSpeed();
                break;
            case '0':
                this.api.currentTime = 0;
                break;
        }
        this.resetControlBarTimer();
    }
    /**
     * 切换播放状态
     * 根据当前播放状态执行暂停或播放操作，如有加载错误则尝试重试
     */
    togglePlayback() {
        if (this.api.state === 'playing') {
            this.api.pause();
        }
        else {
            if (this.loadError) {
                this.retryLoading();
            }
            else {
                this.api.play();
            }
        }
    }
    /**
     * 开始播放
     * 尝试播放视频内容，如有加载错误则进行重试
     */
    startPlayback() {
        if (this.loadError) {
            this.retryLoading();
        }
        else {
            this.api.play();
        }
    }
    /**
     * 进入全屏模式
     * 使用浏览器兼容的API请求全屏显示视频元素
     */
    enterFullscreen() {
        const videoElement = this.media.nativeElement;
        // 使用兼容的全屏API
        if (typeof videoElement.requestFullscreen === 'function') {
            videoElement.requestFullscreen();
        }
        // 为浏览器前缀添加兼容支持
        else if (typeof videoElement.webkitRequestFullscreen === 'function') {
            videoElement.webkitRequestFullscreen();
        }
        else if (typeof videoElement.mozRequestFullScreen === 'function') {
            videoElement.mozRequestFullScreen();
        }
        else if (typeof videoElement.msRequestFullscreen === 'function') {
            videoElement.msRequestFullscreen();
        }
        else {
            console.error('Fullscreen API not supported in this browser');
        }
    }
    /**
     * 切换宽屏模式
     * 切换视频播放器的宽屏显示状态
     */
    toggleWidescreen() {
        this.isWidescreen = !this.isWidescreen;
    }
    /**
     * 切换关灯模式
     * 切换播放器的关灯模式（影院模式），在该模式下会自动退出网页全屏
     */
    toggleTheaterMode() {
        this.isTheaterMode = !this.isTheaterMode;
        if (this.isTheaterMode && this.isWebFullscreen) {
            this.toggleWebFullscreen();
        }
    }
    /**
     * 切换网页全屏
     * 切换网页全屏模式，添加或移除全屏CSS类，在进入网页全屏时会自动退出影院模式
     */
    toggleWebFullscreen() {
        this.isWebFullscreen = !this.isWebFullscreen;
        if (this.isWebFullscreen) {
            document.documentElement.classList.add('web-fullscreen');
            if (this.isTheaterMode) {
                this.isTheaterMode = false;
            }
        }
        else {
            document.documentElement.classList.remove('web-fullscreen');
        }
    }
    /**
     * 设置音量
     * 根据输入事件或当前音量值设置视频播放器的音量
     * @param event 输入事件（可选），通常来自音量控制滑块
     */
    setVolume(event) {
        if (event) {
            const target = event.target;
            this.volume = parseFloat(target.value);
        }
        if (this.api) {
            this.api.volume = this.volume;
            if (this.volume > 0 && this.isMuted) {
                this.isMuted = false;
            }
        }
    }
    /**
     * 切换静音
     * 切换播放器的静音状态，同时保持原始音量值
     */
    toggleMute() {
        this.isMuted = !this.isMuted;
        if (this.api) {
            this.api.volume = this.isMuted ? 0 : this.volume;
        }
    }
    /**
     * 设置播放速率
     * 根据当前设置的播放速率值更新视频播放器的实际播放速度
     */
    setPlaybackRate() {
        if (this.api) {
            this.api.playbackRate = this.playbackRate;
        }
    }
    /**
     * 增加播放速度
     * 将播放速度增加到预设速度选项中的下一个更高值
     */
    increaseSpeed() {
        const currentIndex = this.speedOptions.findIndex(s => s.value === this.playbackRate);
        if (currentIndex < this.speedOptions.length - 1) {
            this.playbackRate = this.speedOptions[currentIndex + 1].value;
            this.setPlaybackRate();
        }
    }
    /**
     * 降低播放速度
     * 将播放速度降低到预设速度选项中的下一个更低值
     */
    decreaseSpeed() {
        const currentIndex = this.speedOptions.findIndex(s => s.value === this.playbackRate);
        if (currentIndex > 0) {
            this.playbackRate = this.speedOptions[currentIndex - 1].value;
            this.setPlaybackRate();
        }
    }
    /**
     * 选择视频质量
     * 切换视频的播放质量，并重新初始化播放器以应用新的质量设置
     * @param quality 质量选项对象，包含URL和其他质量相关信息
     */
    selectQuality(quality) {
        console.log('Selected quality:', quality);
        console.log("修改清晰度");
        if (this.selectedQuality.url === quality.url)
            return;
        this.selectedQuality = quality;
        this.currentHlsUrl = quality.url;
        this.showQualityOptions = false;
        // 重新初始化播放器
        this.initializeHlsPlayer();
        // 预加载相邻质量
        // this.preloadAdjacentQualities();
    }
    /**
     * 选择播放速度
     * 设置指定的播放速度并更新播放器状态，同时关闭速度选项菜单
     * @param speed 播放速度值
     */
    selectSpeed(speed) {
        this.playbackRate = speed;
        this.setPlaybackRate();
        this.showSpeedOptions = false;
    }
    /**
     * 获取速度标签
     * 根据当前播放速度值获取对应的显示标签文本
     * @returns 播放速度的显示标签
     */
    getSpeedLabel() {
        const speedOption = this.speedOptions.find(s => s.value === this.playbackRate);
        return speedOption ? speedOption.label : '正常';
    }
    /**
     * 控制面板显示控制
     * 处理控制面板组件的悬停或焦点进入事件，显示相应的控制选项
     * @param controlType 控制类型，支持质量、速度或音量控制
     */
    onControlEnter(controlType) {
        if (this.controlDebounceTimers[controlType]) {
            clearTimeout(this.controlDebounceTimers[controlType]);
            this.controlDebounceTimers[controlType] = null;
        }
        switch (controlType) {
            case 'quality':
                this.showQualityOptions = true;
                break;
            case 'speed':
                this.showSpeedOptions = true;
                break;
            case 'volume':
                this.showVolumeSlider = true;
                break;
        }
    }
    /**
     * 控制面板隐藏控制
     * 处理控制面板组件的悬停或焦点离开事件，设置定时器后隐藏相应的控制选项
     * @param controlType 控制类型，支持质量、速度或音量控制
     */
    onControlLeave(controlType) {
        if (this.controlDebounceTimers[controlType]) {
            clearTimeout(this.controlDebounceTimers[controlType]);
        }
        this.controlDebounceTimers[controlType] = setTimeout(() => {
            switch (controlType) {
                case 'quality':
                    this.showQualityOptions = false;
                    break;
                case 'speed':
                    this.showSpeedOptions = false;
                    break;
                case 'volume':
                    this.showVolumeSlider = false;
                    break;
            }
            this.controlDebounceTimers[controlType] = null;
        }, 150);
    }
    /**
     * 重置所有视图模式
     * 恢复播放器的默认视图状态，包括关闭宽屏、影院模式，关闭所有菜单，退出全屏等
     */
    resetAllModes() {
        this.isWidescreen = false;
        this.isTheaterMode = false;
        // 关闭所有弹出菜单
        this.showQualityOptions = false;
        this.showSpeedOptions = false;
        this.showVolumeSlider = false;
        this.showSettingsMenu = false;
        // 退出网页全屏
        if (this.isWebFullscreen) {
            this.toggleWebFullscreen();
        }
        // 退出浏览器全屏
        if (document.fullscreenElement) {
            document.exitFullscreen();
        }
    }
    /**
     * 处理上下文菜单
     * 阻止默认的右键上下文菜单显示，用于自定义播放器右键菜单
     * @param event 鼠标事件对象
     */
    menu(event) {
        event.preventDefault();
    }
    /**
     * 切换到下一个视频
     * 实现简单的播放列表轮播功能，切换到下一个可用的视频质量选项
     */
    nextVideo() {
        // 简单轮播播放列表
        const currentIndex = this.availableQualities.findIndex(q => q.url === this.selectedQuality.url);
        if (currentIndex >= 0) {
            const nextIndex = (currentIndex + 1) % this.availableQualities.length;
            this.selectedQuality = this.availableQualities[nextIndex];
            this.currentHlsUrl = this.selectedQuality.url;
            this.initializeHlsPlayer();
        }
    }
    /**************************************************************************/
    /*                                                                        */
    /*                  新增HLS相关事件处理函数                                */
    /*                                                                        */
    /**************************************************************************/
    /**
     * 视频准备就绪事件
     * 处理视频可以开始播放的事件，隐藏缓冲指示器，检测流类型并更新视频时长
     * @param event 事件对象
     */
    onCanPlay(event) {
        this.hideBuffering();
        this.loadError = false;
        // 检测视频流类型
        this.detectStreamType();
        // 更新总时长
        if (!this.isLiveStream && this.api) {
            this.totalDuration = this.api.duration;
        }
        // 更新缓冲显示
        this.updateBufferDisplay();
    }
    /**
     * 视频错误事件
     * 处理视频播放过程中的错误事件，记录错误信息并执行相应的错误处理
     * @param event 事件对象
     */
    onVideoError(event) {
        console.error('Video error:', event.target.error);
        console.log("视频播放错误");
        this.handleVideoError('视频播放错误');
    }
    /**
     * 视频缓冲停滞事件
     * @param event 事件对象
     */
    onStalled(event) {
        this.showBuffering();
    }
    /**
     * 视频缓冲恢复事件
     * @param event 事件对象
     */
    onPlaying(event) {
        this.hideBuffering();
    }
    /**
     * 视频缓冲开始事件
     * @param event 事件对象
     */
    onWaiting(event) {
        this.showBuffering();
    }
    /**
     * 视频缓冲进度事件
     * @param event 事件对象
     */
    onProgress(event) {
        this.updateBufferDisplay();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: i0, type: Videogular, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.4", type: Videogular, isStandalone: true, selector: "app-videogular", viewQueries: [{ propertyName: "player", first: true, predicate: ["mediaPlayer"], descendants: true }, { propertyName: "media", first: true, predicate: ["media"], descendants: true }, { propertyName: "scrubBar", first: true, predicate: ["scrubBar"], descendants: true }], ngImport: i0, template: "<!-- videogular.component.html -->\n<div class=\"video-container\" [class.theater-mode]=\"isTheaterMode\" [class.widescreen]=\"isWidescreen\"\n  (mousemove)=\"handleMouseMove($event)\" (mouseleave)=\"hideControls=true\" (contextmenu)=\"menu($event)\">\n  <!-- \u5173\u706F\u6A21\u5F0F\u8499\u5C42 -->\n  <div class=\"dark-overlay\" *ngIf=\"isTheaterMode\"></div>\n\n  <vg-player (onPlayerReady)=\"onPlayerReady($event)\" #mediaPlayer tabindex=\"0\" (keydown)=\"handleKeyEvents($event)\"\n    [class.hide-controls]=\"hideControls\">\n    <!-- \u89C6\u9891\u4E3B\u4F53 -->\n    <video [vgMedia]=\"$any(media)\" #media id=\"mainVideo\" preload=\"auto\" crossorigin=\"anonymous\" autoplay muted\n      playsinline [poster]=\"posterImage\" (canplay)=\"onCanPlay($event)\"\n      (error)=\"onVideoError($event)\" (stalled)=\"onStalled($event)\" (progress)=\"onProgress($event)\"\n      (waiting)=\"onWaiting($event)\" (playing)=\"onPlaying($event)\">\n      <!-- \u4EC5\u4FDD\u7559\u4E00\u4E2Asource\u5143\u7D20\u7528\u4E8EHLS -->\n      <source [src]=\"currentHlsUrl\" type=\"application/x-mpegURL\">\n    </video>\n\n    <!-- \u64AD\u653E\u5668\u8986\u76D6\u5C42 -->\n    <vg-overlay-play *ngIf=\"showOverlayPlay\" (click)=\"togglePlayback()\"></vg-overlay-play>\n\n    <!-- \u81EA\u5B9A\u4E49\u7F13\u51B2\u6307\u793A\u5668 -->\n    <div class=\"custom-buffering\" *ngIf=\"isBuffering\">\n      <div class=\"spinner\"></div>\n      <div class=\"buffering-text\">\u52A0\u8F7D\u4E2D...</div>\n    </div>\n\n    <!-- \u52A0\u8F7D\u5931\u8D25\u63D0\u793A -->\n    <div class=\"load-error\" *ngIf=\"loadError\">\n      <div class=\"error-icon\">\u274C</div>\n      <div class=\"error-text\">\u89C6\u9891\u52A0\u8F7D\u5931\u8D25</div>\n      <button class=\"retry-button\" (click)=\"retryLoading()\">\u91CD\u8BD5</button>\n    </div>\n\n    <!-- \u64AD\u653E\u5668\u63A7\u5236\u754C\u9762 -->\n    <vg-controls>\n      <!-- \u9876\u90E8\u8FDB\u5EA6\u6761 -->\n      <vg-scrub-bar class=\"top-scrub-bar\" #scrubBar (mousedown)=\"startScrubbing($event)\">\n        <vg-scrub-bar-current-time></vg-scrub-bar-current-time>\n      </vg-scrub-bar>\n\n      <!-- \u63A7\u5236\u680F\u4E3B\u4F53 -->\n      <div class=\"controls-container\">\n        <!-- \u5DE6\u4FA7\u63A7\u5236\u7EC4 -->\n        <div class=\"left-controls\">\n          <!-- \u64AD\u653E/\u6682\u505C\u6309\u94AE -->\n          <vg-play-pause></vg-play-pause>\n\n          <!-- \u4E0B\u4E00\u4E2A\u6309\u94AE -->\n          <button class=\"next-button\" (click)=\"nextVideo()\" title=\"\u4E0B\u4E00\u4E2A\">\n            <i>\u23ED\uFE0F</i>\n          </button>\n\n          <!-- \u65F6\u95F4\u663E\u793A -->\n          <div class=\"time-display\">\n            <vg-time-display vgProperty=\"current\" vgFormat=\"mm:ss\"></vg-time-display>\n            <span>/</span>\n            <vg-time-display vgProperty=\"total\" vgFormat=\"mm:ss\"></vg-time-display>\n          </div>\n        </div>\n\n        <!-- \u53F3\u4FA7\u63A7\u5236\u7EC4 -->\n        <div class=\"right-controls\">\n          <!-- \u6E05\u6670\u5EA6\u63A7\u5236 -->\n          <div class=\"quality-control\" (mouseenter)=\"onControlEnter('quality')\"\n            (mouseleave)=\"onControlLeave('quality')\">\n            <div class=\"quality-trigger\">{{ selectedQuality.label }}</div>\n            <div class=\"quality-dropdown\" *ngIf=\"showQualityOptions\" [class.upward]=\"true\">\n              <ul>\n                <li *ngFor=\"let quality of availableQualities\" (click)=\"selectQuality(quality)\"\n                  [class.active]=\"quality.url === selectedQuality.url\">\n                  {{ quality.label }}\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <!-- \u500D\u901F\u63A7\u5236 -->\n          <div class=\"speed-control\" (mouseenter)=\"onControlEnter('speed')\" (mouseleave)=\"onControlLeave('speed')\">\n            <div class=\"speed-trigger\">{{ getSpeedLabel() }}</div>\n            <div class=\"speed-dropdown\" *ngIf=\"showSpeedOptions\" [class.upward]=\"true\">\n              <ul>\n                <li *ngFor=\"let speed of speedOptions\" (click)=\"selectSpeed(speed.value)\"\n                  [class.active]=\"speed.value === playbackRate\">\n                  {{ speed.label }}\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <!-- \u97F3\u91CF\u63A7\u5236 -->\n          <div class=\"volume-control\" (mouseenter)=\"onControlEnter('volume')\" (mouseleave)=\"onControlLeave('volume')\">\n            <button (click)=\"toggleMute()\" class=\"volume-button\">\n              <i *ngIf=\"!isMuted\" class=\"volume-icon\">\uD83D\uDD0A</i>\n              <i *ngIf=\"isMuted\" class=\"volume-icon\">\uD83D\uDD07</i>\n            </button>\n            <div class=\"volume-slider-vertical\" *ngIf=\"showVolumeSlider\">\n              <input type=\"range\" min=\"0\" max=\"1\" step=\"0.05\" [(ngModel)]=\"volume\" (input)=\"setVolume($event)\"\n                class=\"volume-slider-vertical-input\">\n            </div>\n          </div>\n\n          <!-- \u8BBE\u7F6E\u6309\u94AE -->\n          <div class=\"s-c\">\n            <button class=\"s-b\" title=\"\u8BBE\u7F6E\">\n              <i>\u2699\uFE0F</i>\n            </button>\n            <div class=\"s-d\">\n              <!-- \u8BBE\u7F6E\u83DC\u5355\u6807\u9898 -->\n              <div class=\"s-h\">\n                <h4>\u64AD\u653E\u8BBE\u7F6E</h4>\n              </div>\n              \n              <!-- \u8BBE\u7F6E\u9009\u9879\u7EC4 -->\n              <div class=\"s-g\">\n                <h5>\u89C6\u56FE\u6A21\u5F0F</h5>\n                <div class=\"s-grid\">\n                  <button (click)=\"toggleWidescreen()\" [class.active]=\"isWidescreen\" title=\"\u5BBD\u5C4F\u6A21\u5F0F\">\n                    <i class=\"s-i\">\uD83D\uDDA5\uFE0F</i>\n                    <span>\u5BBD\u5C4F\u6A21\u5F0F</span>\n                  </button>\n                  <button (click)=\"toggleWebFullscreen()\" [class.active]=\"isWebFullscreen\" title=\"\u7F51\u9875\u5168\u5C4F\">\n                    <i class=\"s-i\">\uD83D\uDCF1</i>\n                    <span>\u7F51\u9875\u5168\u5C4F</span>\n                  </button>\n                  <button (click)=\"toggleTheaterMode()\" [class.active]=\"isTheaterMode\" title=\"\u5173\u706F\u6A21\u5F0F\">\n                    <i class=\"s-i\">\uD83C\uDF19</i>\n                    <span>\u5173\u706F\u6A21\u5F0F</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- \u5168\u5C4F\u6A21\u5F0F -->\n          <vg-fullscreen (click)=\"enterFullscreen()\"></vg-fullscreen>\n        </div>\n      </div>\n    </vg-controls>\n  </vg-player>\n\n  <!-- \u952E\u76D8\u5FEB\u6377\u952E\u63D0\u793A -->\n  <div class=\"keyboard-hint\">\n    <span>\u7A7A\u683C:\u64AD\u653E/\u6682\u505C</span>\n    <span>\u2190\u2192:\u5FEB\u8FDB/\u5FEB\u9000</span>\n    <span>\u2191\u2193:\u97F3\u91CF\u8C03\u8282</span>\n    <span>1-9:\u8DF3\u8F6C\u8FDB\u5EA6</span>\n  </div>\n</div>", styles: ["@charset \"UTF-8\";*{-webkit-user-select:none;user-select:none}vg-scrub-bar.top-scrub-bar{position:absolute;left:0;top:-6px;margin:0;width:100%;height:8px;background:#ffffff1a;z-index:10;border-radius:0;cursor:pointer;transition:none}vg-scrub-bar.top-scrub-bar .scrub-bar-buffer{position:absolute;top:0;left:0;height:100%;background:#b4b4b499;z-index:1;pointer-events:none;border-radius:4px;transition:width .3s ease}vg-scrub-bar.top-scrub-bar vg-scrub-bar-current-time{background-color:#ff6c00;height:100%;border-radius:0;transition:none;position:relative;z-index:2}.video-container{width:70%;margin:0 auto;position:relative;transition:all .3s ease}.video-container.widescreen{width:90%;max-width:1200px}.video-container.widescreen vg-player{padding-bottom:42.86%}.video-container.theater-mode{position:relative}.video-container.theater-mode .dark-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background:#000000e6;z-index:50;pointer-events:none}.video-container.theater-mode vg-player{z-index:60;box-shadow:0 0 20px #0009}.video-container .keyboard-hint{display:flex;justify-content:space-between;margin-top:10px;padding:8px 16px;background:#000000b3;border-radius:4px;color:#ffdb4d;font-size:14px}.video-container .keyboard-hint span{margin:0 5px}vg-player{width:100%;height:0;padding-bottom:56.25%;position:relative;overflow:hidden;background:#000;box-shadow:0 4px 16px #0003;outline:none;transition:padding-bottom .3s ease}vg-player.hide-controls vg-controls{transform:translateY(100%);opacity:0;pointer-events:none}vg-player.hide-controls vg-overlay-play{opacity:1}vg-player video,vg-player vg-controls,vg-player vg-overlay-play,vg-player vg-buffering{position:absolute;top:0;left:0;width:100%;height:100%}vg-player .custom-buffering{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#000000b3;border-radius:10px;padding:20px;display:flex;flex-direction:column;align-items:center;z-index:30}vg-player .custom-buffering .spinner{width:40px;height:40px;border:4px solid rgba(255,255,255,.3);border-radius:50%;border-top:4px solid #ff6c00;animation:spin 1s linear infinite;margin-bottom:10px}vg-player .custom-buffering .buffering-text{color:#fff;font-size:16px}vg-player .load-error{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#000000d9;border-radius:10px;padding:25px 30px;text-align:center;z-index:40;width:80%;max-width:350px}vg-player .load-error .error-icon{font-size:48px;margin-bottom:15px;color:#ff5252}vg-player .load-error .error-text{color:#fff;font-size:18px;margin-bottom:20px}vg-player .load-error .retry-button{background:#ff6c00;color:#fff;border:none;padding:10px 25px;border-radius:25px;cursor:pointer;font-size:16px;transition:background .3s}vg-player .load-error .retry-button:hover{background:#ff8c00}vg-player vg-controls{background:linear-gradient(to top,#282828e6,#141414f2);height:50px;box-sizing:border-box;transition:all .3s ease;top:auto;bottom:0;display:flex;flex-direction:column;justify-content:flex-end;transform:translateY(0);opacity:1}vg-player vg-controls:hover{opacity:1!important;background:linear-gradient(to top,#323232f2,#1e1e1e)}vg-player vg-controls .controls-container{display:flex;justify-content:space-between;align-items:center;width:100%}vg-player vg-controls .controls-container .left-controls,vg-player vg-controls .controls-container .right-controls{display:flex;align-items:center;gap:15px}vg-player vg-controls .controls-container .time-display{display:flex;align-items:center;gap:3px;color:#fff;font-size:14px;font-weight:500}vg-player vg-controls button{background:#ffffff26;border:none;width:36px;height:36px;border-radius:50%;cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:16px;color:#fff;transition:all .2s ease}vg-player vg-controls button:hover{background:#ffffff40;transform:scale(1.1)}vg-player vg-controls button.active{background:#ff8c004d;box-shadow:0 0 0 2px #ff8c0080}vg-player vg-controls select{background:#ffffff26;border:1px solid rgba(255,255,255,.3);border-radius:15px;color:#fff;padding:5px 10px;cursor:pointer;outline:none;font-size:13px;height:32px}vg-player vg-controls select option{background:#1e1e1ef2;color:#fff}vg-player vg-controls .volume-control{position:relative}vg-player vg-controls .volume-control .volume-slider-vertical{position:absolute;bottom:100%;left:50%;transform:translate(-50%);background:#000000d9;padding:15px 8px;border-radius:25px;box-shadow:0 5px 15px #00000080;z-index:100}vg-player vg-controls .volume-control .volume-slider-vertical .volume-slider-vertical-input{-webkit-appearance:slider-vertical;writing-mode:bt-lr;width:8px;height:80px;padding:0 10px}vg-player vg-controls .volume-control .volume-slider-vertical .volume-slider-vertical-input::-webkit-slider-thumb{-webkit-appearance:none;width:15px;height:15px;border-radius:50%;background:#ff6c00;cursor:pointer}vg-player vg-controls .volume-control .volume-slider-vertical .settings-dropdown{position:absolute;right:0;bottom:100%;margin-bottom:8px;background:#000000eb;border:1px solid rgba(255,255,255,.15);border-radius:12px;padding:0;min-width:280px;box-shadow:0 8px 32px #00000080;-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);overflow:hidden;animation:slideUp .25s ease-out;z-index:100}vg-player vg-controls .volume-control .volume-slider-vertical .settings-header{background:#ff8c0026;padding:15px 20px;border-bottom:1px solid rgba(255,140,0,.3);margin-bottom:0}vg-player vg-controls .volume-control .volume-slider-vertical .settings-header h4{color:#ff8c00;font-size:14px;font-weight:600;margin:0;text-transform:uppercase;letter-spacing:.5px}vg-player vg-controls .volume-control .volume-slider-vertical .settings-group{padding:15px 20px;border-bottom:1px solid rgba(255,255,255,.08)}vg-player vg-controls .volume-control .volume-slider-vertical .settings-group:last-child{border-bottom:none}vg-player vg-controls .volume-control .volume-slider-vertical .settings-group h5{color:#ddd;font-size:12px;font-weight:500;margin:0 0 12px;text-transform:uppercase;letter-spacing:.5px;opacity:.8}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid{display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;width:100%}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:6px;width:100%;min-height:70px;padding:10px 5px;background:#ffffff0d;border:2px solid transparent;border-radius:10px;color:#f0f0f0;cursor:pointer;transition:all .3s cubic-bezier(.4,0,.2,1);font-size:11px;font-weight:500;text-align:center;text-transform:capitalize;position:relative;overflow:hidden}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button:before{content:\"\";position:absolute;top:0;left:-100%;width:100%;height:100%;background:linear-gradient(90deg,transparent,rgba(255,255,255,.05),transparent);transition:left .5s}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button:hover:before{left:100%}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button:hover{background:#ffffff1a;border-color:#ff8c004d;transform:translateY(-2px);box-shadow:0 4px 12px #0000004d}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button.active{background:linear-gradient(135deg,#ff8c0033,#ff5c001a);border-color:#ff8c00;box-shadow:0 0 10px #ff8c0040}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid .settings-icon{font-size:20px;margin-bottom:4px;filter:drop-shadow(0 1px 2px rgba(0,0,0,.3))}@keyframes slideUp{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}vg-player vg-controls .quality-control,vg-player vg-controls .speed-control{position:relative;min-width:100px;text-align:center}vg-player vg-controls .quality-control .quality-trigger,vg-player vg-controls .quality-control .speed-trigger,vg-player vg-controls .speed-control .quality-trigger,vg-player vg-controls .speed-control .speed-trigger{padding:8px 12px;background:#ffffff26;border-radius:15px;color:#fff;font-size:13px;cursor:pointer;border:1px solid rgba(255,255,255,.3);transition:all .2s ease}vg-player vg-controls .quality-control .quality-trigger:hover,vg-player vg-controls .quality-control .speed-trigger:hover,vg-player vg-controls .speed-control .quality-trigger:hover,vg-player vg-controls .speed-control .speed-trigger:hover{background:#ffffff40}vg-player vg-controls .quality-control .quality-dropdown,vg-player vg-controls .quality-control .speed-dropdown,vg-player vg-controls .speed-control .quality-dropdown,vg-player vg-controls .speed-control .speed-dropdown{position:absolute;left:50%;transform:translate(-50%);background:#000;border-radius:8px;min-width:120px;box-shadow:0 5px 15px #0000004d;z-index:100;overflow:hidden}vg-player vg-controls .quality-control .quality-dropdown.upward,vg-player vg-controls .quality-control .speed-dropdown.upward,vg-player vg-controls .speed-control .quality-dropdown.upward,vg-player vg-controls .speed-control .speed-dropdown.upward{bottom:100%;top:auto;margin-bottom:8px}vg-player vg-controls .quality-control .quality-dropdown ul,vg-player vg-controls .quality-control .speed-dropdown ul,vg-player vg-controls .speed-control .quality-dropdown ul,vg-player vg-controls .speed-control .speed-dropdown ul{list-style:none;padding:0;margin:0}vg-player vg-controls .quality-control .quality-dropdown ul li,vg-player vg-controls .quality-control .speed-dropdown ul li,vg-player vg-controls .speed-control .quality-dropdown ul li,vg-player vg-controls .speed-control .speed-dropdown ul li{padding:10px 15px;color:#fff;cursor:pointer;text-align:center;transition:background .2s ease;border-bottom:1px solid rgba(255,255,255,.1)}vg-player vg-controls .quality-control .quality-dropdown ul li:hover,vg-player vg-controls .quality-control .speed-dropdown ul li:hover,vg-player vg-controls .speed-control .quality-dropdown ul li:hover,vg-player vg-controls .speed-control .speed-dropdown ul li:hover{background:#ffffff26}vg-player vg-controls .quality-control .quality-dropdown ul li:last-child,vg-player vg-controls .quality-control .speed-dropdown ul li:last-child,vg-player vg-controls .speed-control .quality-dropdown ul li:last-child,vg-player vg-controls .speed-control .speed-dropdown ul li:last-child{border-bottom:none}vg-player vg-controls .quality-control .quality-dropdown ul li.active,vg-player vg-controls .quality-control .speed-dropdown ul li.active,vg-player vg-controls .speed-control .quality-dropdown ul li.active,vg-player vg-controls .speed-control .speed-dropdown ul li.active{color:#ff8c00;font-weight:700;background:#ff8c001a}vg-player vg-controls .s-c{position:relative;height:42px;display:flex;align-items:center}vg-player vg-controls .s-b{width:42px;height:42px;background:#ffffff26;border-radius:50%;color:#ffdb4d;cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:18px;z-index:10;border:none;padding:0}vg-player vg-controls .s-b i{transition:transform .3s}vg-player vg-controls .s-d{position:absolute;right:0;bottom:calc(100% + 8px);margin-bottom:0;background:#000;border:1px solid rgba(255,255,255,.15);border-radius:12px;padding:0;min-width:280px;box-shadow:0 8px 32px #00000080;z-index:100;opacity:0;visibility:hidden;transition:opacity .2s ease,visibility .2s ease}vg-player vg-controls .s-c:hover .s-d,vg-player vg-controls .s-d:hover{opacity:1;visibility:visible}vg-player vg-controls .s-h{background:#ffffff0d;padding:15px 20px;border-bottom:1px solid rgba(255,255,255,.08);margin:0}vg-player vg-controls .s-h h4{color:#f0f0f0;font-size:14px;margin:0}vg-player vg-controls .s-g{padding:15px 20px;border-bottom:1px solid rgba(255,255,255,.08)}vg-player vg-controls .s-g:last-child{border-bottom:0}vg-player vg-controls .s-g h5{color:#ddd;font-size:12px;margin:0 0 12px;opacity:.8}vg-player vg-controls .s-grid{display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;width:100%}vg-player vg-controls .s-grid button{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:6px;width:100%;min-height:70px;padding:10px 5px;background:#ffffff0d;border:2px solid transparent;border-radius:10px;color:#f0f0f0;cursor:pointer;font-size:11px;text-align:center}vg-player vg-controls .s-grid button:hover{background:#ffffff1a;border-color:#ffffff4d;transform:translateY(-2px)}vg-player vg-controls .s-grid button.active{background:#ffffff26;border-color:#ffffff4d}vg-player vg-controls .s-i{font-size:20px}vg-player vg-fullscreen{cursor:pointer;width:45px;height:45px;color:#fff;font-size:24px;transition:all .3s ease;display:flex;align-items:center;justify-content:center;border-radius:50%;background:#fff3}vg-player vg-fullscreen:hover{transform:scale(1.15);background:#ffffff4d;box-shadow:0 0 10px #ffffff80}@media (max-width: 768px){vg-player{padding-bottom:75%}vg-player vg-controls{height:45px}vg-player vg-controls .controls-container .left-controls,vg-player vg-controls .controls-container .right-controls{gap:8px}vg-player vg-controls .controls-container select{padding:4px 8px;font-size:12px;height:28px}vg-player vg-controls button{width:32px;height:32px;font-size:14px}vg-player vg-controls .quality-control,vg-player vg-controls .speed-control{min-width:80px}vg-player vg-controls .quality-control .quality-trigger,vg-player vg-controls .quality-control .speed-trigger,vg-player vg-controls .speed-control .quality-trigger,vg-player vg-controls .speed-control .speed-trigger{padding:6px 10px;font-size:12px}vg-player vg-controls .settings-button,vg-player vg-controls .quality-button,vg-player vg-controls .speed-button{display:block}vg-player vg-controls .widescreen-button,vg-player vg-controls .web-fullscreen-button{display:none}}@media (max-width: 480px){vg-player vg-controls{height:40px}vg-player vg-controls .controls-container .time-display{font-size:12px}vg-player vg-controls .quality-control,vg-player vg-controls .speed-control{min-width:70px}vg-player vg-controls .quality-control .quality-trigger,vg-player vg-controls .quality-control .speed-trigger,vg-player vg-controls .speed-control .quality-trigger,vg-player vg-controls .speed-control .speed-trigger{padding:4px 8px;font-size:11px}vg-player vg-controls .keyboard-hint{flex-wrap:wrap;font-size:12px}vg-player vg-controls .keyboard-hint span{margin:3px}}@media (max-width: 768px){.video-container{width:90%}}@media (max-width: 480px){.video-container{width:95%}}:host-context(.web-fullscreen) .video-container{position:fixed;top:0;left:0;width:100%;height:100%;z-index:10000;background:#000;margin:0;padding:0}:host-context(.web-fullscreen) .video-container vg-player{width:100%;height:100%;padding-bottom:0}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.vg-overlay-play .vg-overlay-play:before{color:orange!important}\n"], dependencies: [{ kind: "ngmodule", type: VgCoreModule }, { kind: "directive", type: i1.VgMediaDirective, selector: "[vgMedia]", inputs: ["vgMedia", "vgMaster"] }, { kind: "component", type: i1.VgPlayerComponent, selector: "vg-player", outputs: ["onPlayerReady", "onMediaReady"] }, { kind: "ngmodule", type: VgControlsModule }, { kind: "component", type: i2.VgControlsComponent, selector: "vg-controls", inputs: ["vgFor", "vgAutohide", "vgAutohideTime"] }, { kind: "component", type: i2.VgTimeDisplayComponent, selector: "vg-time-display", inputs: ["vgFor", "vgProperty", "vgFormat"] }, { kind: "component", type: i2.VgScrubBarComponent, selector: "vg-scrub-bar", inputs: ["vgFor", "vgSlider"] }, { kind: "component", type: i2.VgPlayPauseComponent, selector: "vg-play-pause", inputs: ["vgFor"] }, { kind: "component", type: i2.VgFullscreenComponent, selector: "vg-fullscreen" }, { kind: "component", type: i2.VgScrubBarCurrentTimeComponent, selector: "vg-scrub-bar-current-time", inputs: ["vgFor", "vgSlider"] }, { kind: "ngmodule", type: VgOverlayPlayModule }, { kind: "component", type: i3.VgOverlayPlayComponent, selector: "vg-overlay-play", inputs: ["vgFor", "vgSkipIfControlsHidden", "vgSkipIfControlsHiddenDelay"] }, { kind: "ngmodule", type: VgBufferingModule }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: i0, type: Videogular, decorators: [{
            type: Component,
            args: [{ selector: 'app-videogular', standalone: true, imports: [
                        VgCoreModule,
                        VgControlsModule,
                        VgOverlayPlayModule,
                        VgBufferingModule,
                        CommonModule,
                        FormsModule
                    ], template: "<!-- videogular.component.html -->\n<div class=\"video-container\" [class.theater-mode]=\"isTheaterMode\" [class.widescreen]=\"isWidescreen\"\n  (mousemove)=\"handleMouseMove($event)\" (mouseleave)=\"hideControls=true\" (contextmenu)=\"menu($event)\">\n  <!-- \u5173\u706F\u6A21\u5F0F\u8499\u5C42 -->\n  <div class=\"dark-overlay\" *ngIf=\"isTheaterMode\"></div>\n\n  <vg-player (onPlayerReady)=\"onPlayerReady($event)\" #mediaPlayer tabindex=\"0\" (keydown)=\"handleKeyEvents($event)\"\n    [class.hide-controls]=\"hideControls\">\n    <!-- \u89C6\u9891\u4E3B\u4F53 -->\n    <video [vgMedia]=\"$any(media)\" #media id=\"mainVideo\" preload=\"auto\" crossorigin=\"anonymous\" autoplay muted\n      playsinline [poster]=\"posterImage\" (canplay)=\"onCanPlay($event)\"\n      (error)=\"onVideoError($event)\" (stalled)=\"onStalled($event)\" (progress)=\"onProgress($event)\"\n      (waiting)=\"onWaiting($event)\" (playing)=\"onPlaying($event)\">\n      <!-- \u4EC5\u4FDD\u7559\u4E00\u4E2Asource\u5143\u7D20\u7528\u4E8EHLS -->\n      <source [src]=\"currentHlsUrl\" type=\"application/x-mpegURL\">\n    </video>\n\n    <!-- \u64AD\u653E\u5668\u8986\u76D6\u5C42 -->\n    <vg-overlay-play *ngIf=\"showOverlayPlay\" (click)=\"togglePlayback()\"></vg-overlay-play>\n\n    <!-- \u81EA\u5B9A\u4E49\u7F13\u51B2\u6307\u793A\u5668 -->\n    <div class=\"custom-buffering\" *ngIf=\"isBuffering\">\n      <div class=\"spinner\"></div>\n      <div class=\"buffering-text\">\u52A0\u8F7D\u4E2D...</div>\n    </div>\n\n    <!-- \u52A0\u8F7D\u5931\u8D25\u63D0\u793A -->\n    <div class=\"load-error\" *ngIf=\"loadError\">\n      <div class=\"error-icon\">\u274C</div>\n      <div class=\"error-text\">\u89C6\u9891\u52A0\u8F7D\u5931\u8D25</div>\n      <button class=\"retry-button\" (click)=\"retryLoading()\">\u91CD\u8BD5</button>\n    </div>\n\n    <!-- \u64AD\u653E\u5668\u63A7\u5236\u754C\u9762 -->\n    <vg-controls>\n      <!-- \u9876\u90E8\u8FDB\u5EA6\u6761 -->\n      <vg-scrub-bar class=\"top-scrub-bar\" #scrubBar (mousedown)=\"startScrubbing($event)\">\n        <vg-scrub-bar-current-time></vg-scrub-bar-current-time>\n      </vg-scrub-bar>\n\n      <!-- \u63A7\u5236\u680F\u4E3B\u4F53 -->\n      <div class=\"controls-container\">\n        <!-- \u5DE6\u4FA7\u63A7\u5236\u7EC4 -->\n        <div class=\"left-controls\">\n          <!-- \u64AD\u653E/\u6682\u505C\u6309\u94AE -->\n          <vg-play-pause></vg-play-pause>\n\n          <!-- \u4E0B\u4E00\u4E2A\u6309\u94AE -->\n          <button class=\"next-button\" (click)=\"nextVideo()\" title=\"\u4E0B\u4E00\u4E2A\">\n            <i>\u23ED\uFE0F</i>\n          </button>\n\n          <!-- \u65F6\u95F4\u663E\u793A -->\n          <div class=\"time-display\">\n            <vg-time-display vgProperty=\"current\" vgFormat=\"mm:ss\"></vg-time-display>\n            <span>/</span>\n            <vg-time-display vgProperty=\"total\" vgFormat=\"mm:ss\"></vg-time-display>\n          </div>\n        </div>\n\n        <!-- \u53F3\u4FA7\u63A7\u5236\u7EC4 -->\n        <div class=\"right-controls\">\n          <!-- \u6E05\u6670\u5EA6\u63A7\u5236 -->\n          <div class=\"quality-control\" (mouseenter)=\"onControlEnter('quality')\"\n            (mouseleave)=\"onControlLeave('quality')\">\n            <div class=\"quality-trigger\">{{ selectedQuality.label }}</div>\n            <div class=\"quality-dropdown\" *ngIf=\"showQualityOptions\" [class.upward]=\"true\">\n              <ul>\n                <li *ngFor=\"let quality of availableQualities\" (click)=\"selectQuality(quality)\"\n                  [class.active]=\"quality.url === selectedQuality.url\">\n                  {{ quality.label }}\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <!-- \u500D\u901F\u63A7\u5236 -->\n          <div class=\"speed-control\" (mouseenter)=\"onControlEnter('speed')\" (mouseleave)=\"onControlLeave('speed')\">\n            <div class=\"speed-trigger\">{{ getSpeedLabel() }}</div>\n            <div class=\"speed-dropdown\" *ngIf=\"showSpeedOptions\" [class.upward]=\"true\">\n              <ul>\n                <li *ngFor=\"let speed of speedOptions\" (click)=\"selectSpeed(speed.value)\"\n                  [class.active]=\"speed.value === playbackRate\">\n                  {{ speed.label }}\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <!-- \u97F3\u91CF\u63A7\u5236 -->\n          <div class=\"volume-control\" (mouseenter)=\"onControlEnter('volume')\" (mouseleave)=\"onControlLeave('volume')\">\n            <button (click)=\"toggleMute()\" class=\"volume-button\">\n              <i *ngIf=\"!isMuted\" class=\"volume-icon\">\uD83D\uDD0A</i>\n              <i *ngIf=\"isMuted\" class=\"volume-icon\">\uD83D\uDD07</i>\n            </button>\n            <div class=\"volume-slider-vertical\" *ngIf=\"showVolumeSlider\">\n              <input type=\"range\" min=\"0\" max=\"1\" step=\"0.05\" [(ngModel)]=\"volume\" (input)=\"setVolume($event)\"\n                class=\"volume-slider-vertical-input\">\n            </div>\n          </div>\n\n          <!-- \u8BBE\u7F6E\u6309\u94AE -->\n          <div class=\"s-c\">\n            <button class=\"s-b\" title=\"\u8BBE\u7F6E\">\n              <i>\u2699\uFE0F</i>\n            </button>\n            <div class=\"s-d\">\n              <!-- \u8BBE\u7F6E\u83DC\u5355\u6807\u9898 -->\n              <div class=\"s-h\">\n                <h4>\u64AD\u653E\u8BBE\u7F6E</h4>\n              </div>\n              \n              <!-- \u8BBE\u7F6E\u9009\u9879\u7EC4 -->\n              <div class=\"s-g\">\n                <h5>\u89C6\u56FE\u6A21\u5F0F</h5>\n                <div class=\"s-grid\">\n                  <button (click)=\"toggleWidescreen()\" [class.active]=\"isWidescreen\" title=\"\u5BBD\u5C4F\u6A21\u5F0F\">\n                    <i class=\"s-i\">\uD83D\uDDA5\uFE0F</i>\n                    <span>\u5BBD\u5C4F\u6A21\u5F0F</span>\n                  </button>\n                  <button (click)=\"toggleWebFullscreen()\" [class.active]=\"isWebFullscreen\" title=\"\u7F51\u9875\u5168\u5C4F\">\n                    <i class=\"s-i\">\uD83D\uDCF1</i>\n                    <span>\u7F51\u9875\u5168\u5C4F</span>\n                  </button>\n                  <button (click)=\"toggleTheaterMode()\" [class.active]=\"isTheaterMode\" title=\"\u5173\u706F\u6A21\u5F0F\">\n                    <i class=\"s-i\">\uD83C\uDF19</i>\n                    <span>\u5173\u706F\u6A21\u5F0F</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- \u5168\u5C4F\u6A21\u5F0F -->\n          <vg-fullscreen (click)=\"enterFullscreen()\"></vg-fullscreen>\n        </div>\n      </div>\n    </vg-controls>\n  </vg-player>\n\n  <!-- \u952E\u76D8\u5FEB\u6377\u952E\u63D0\u793A -->\n  <div class=\"keyboard-hint\">\n    <span>\u7A7A\u683C:\u64AD\u653E/\u6682\u505C</span>\n    <span>\u2190\u2192:\u5FEB\u8FDB/\u5FEB\u9000</span>\n    <span>\u2191\u2193:\u97F3\u91CF\u8C03\u8282</span>\n    <span>1-9:\u8DF3\u8F6C\u8FDB\u5EA6</span>\n  </div>\n</div>", styles: ["@charset \"UTF-8\";*{-webkit-user-select:none;user-select:none}vg-scrub-bar.top-scrub-bar{position:absolute;left:0;top:-6px;margin:0;width:100%;height:8px;background:#ffffff1a;z-index:10;border-radius:0;cursor:pointer;transition:none}vg-scrub-bar.top-scrub-bar .scrub-bar-buffer{position:absolute;top:0;left:0;height:100%;background:#b4b4b499;z-index:1;pointer-events:none;border-radius:4px;transition:width .3s ease}vg-scrub-bar.top-scrub-bar vg-scrub-bar-current-time{background-color:#ff6c00;height:100%;border-radius:0;transition:none;position:relative;z-index:2}.video-container{width:70%;margin:0 auto;position:relative;transition:all .3s ease}.video-container.widescreen{width:90%;max-width:1200px}.video-container.widescreen vg-player{padding-bottom:42.86%}.video-container.theater-mode{position:relative}.video-container.theater-mode .dark-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background:#000000e6;z-index:50;pointer-events:none}.video-container.theater-mode vg-player{z-index:60;box-shadow:0 0 20px #0009}.video-container .keyboard-hint{display:flex;justify-content:space-between;margin-top:10px;padding:8px 16px;background:#000000b3;border-radius:4px;color:#ffdb4d;font-size:14px}.video-container .keyboard-hint span{margin:0 5px}vg-player{width:100%;height:0;padding-bottom:56.25%;position:relative;overflow:hidden;background:#000;box-shadow:0 4px 16px #0003;outline:none;transition:padding-bottom .3s ease}vg-player.hide-controls vg-controls{transform:translateY(100%);opacity:0;pointer-events:none}vg-player.hide-controls vg-overlay-play{opacity:1}vg-player video,vg-player vg-controls,vg-player vg-overlay-play,vg-player vg-buffering{position:absolute;top:0;left:0;width:100%;height:100%}vg-player .custom-buffering{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#000000b3;border-radius:10px;padding:20px;display:flex;flex-direction:column;align-items:center;z-index:30}vg-player .custom-buffering .spinner{width:40px;height:40px;border:4px solid rgba(255,255,255,.3);border-radius:50%;border-top:4px solid #ff6c00;animation:spin 1s linear infinite;margin-bottom:10px}vg-player .custom-buffering .buffering-text{color:#fff;font-size:16px}vg-player .load-error{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#000000d9;border-radius:10px;padding:25px 30px;text-align:center;z-index:40;width:80%;max-width:350px}vg-player .load-error .error-icon{font-size:48px;margin-bottom:15px;color:#ff5252}vg-player .load-error .error-text{color:#fff;font-size:18px;margin-bottom:20px}vg-player .load-error .retry-button{background:#ff6c00;color:#fff;border:none;padding:10px 25px;border-radius:25px;cursor:pointer;font-size:16px;transition:background .3s}vg-player .load-error .retry-button:hover{background:#ff8c00}vg-player vg-controls{background:linear-gradient(to top,#282828e6,#141414f2);height:50px;box-sizing:border-box;transition:all .3s ease;top:auto;bottom:0;display:flex;flex-direction:column;justify-content:flex-end;transform:translateY(0);opacity:1}vg-player vg-controls:hover{opacity:1!important;background:linear-gradient(to top,#323232f2,#1e1e1e)}vg-player vg-controls .controls-container{display:flex;justify-content:space-between;align-items:center;width:100%}vg-player vg-controls .controls-container .left-controls,vg-player vg-controls .controls-container .right-controls{display:flex;align-items:center;gap:15px}vg-player vg-controls .controls-container .time-display{display:flex;align-items:center;gap:3px;color:#fff;font-size:14px;font-weight:500}vg-player vg-controls button{background:#ffffff26;border:none;width:36px;height:36px;border-radius:50%;cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:16px;color:#fff;transition:all .2s ease}vg-player vg-controls button:hover{background:#ffffff40;transform:scale(1.1)}vg-player vg-controls button.active{background:#ff8c004d;box-shadow:0 0 0 2px #ff8c0080}vg-player vg-controls select{background:#ffffff26;border:1px solid rgba(255,255,255,.3);border-radius:15px;color:#fff;padding:5px 10px;cursor:pointer;outline:none;font-size:13px;height:32px}vg-player vg-controls select option{background:#1e1e1ef2;color:#fff}vg-player vg-controls .volume-control{position:relative}vg-player vg-controls .volume-control .volume-slider-vertical{position:absolute;bottom:100%;left:50%;transform:translate(-50%);background:#000000d9;padding:15px 8px;border-radius:25px;box-shadow:0 5px 15px #00000080;z-index:100}vg-player vg-controls .volume-control .volume-slider-vertical .volume-slider-vertical-input{-webkit-appearance:slider-vertical;writing-mode:bt-lr;width:8px;height:80px;padding:0 10px}vg-player vg-controls .volume-control .volume-slider-vertical .volume-slider-vertical-input::-webkit-slider-thumb{-webkit-appearance:none;width:15px;height:15px;border-radius:50%;background:#ff6c00;cursor:pointer}vg-player vg-controls .volume-control .volume-slider-vertical .settings-dropdown{position:absolute;right:0;bottom:100%;margin-bottom:8px;background:#000000eb;border:1px solid rgba(255,255,255,.15);border-radius:12px;padding:0;min-width:280px;box-shadow:0 8px 32px #00000080;-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);overflow:hidden;animation:slideUp .25s ease-out;z-index:100}vg-player vg-controls .volume-control .volume-slider-vertical .settings-header{background:#ff8c0026;padding:15px 20px;border-bottom:1px solid rgba(255,140,0,.3);margin-bottom:0}vg-player vg-controls .volume-control .volume-slider-vertical .settings-header h4{color:#ff8c00;font-size:14px;font-weight:600;margin:0;text-transform:uppercase;letter-spacing:.5px}vg-player vg-controls .volume-control .volume-slider-vertical .settings-group{padding:15px 20px;border-bottom:1px solid rgba(255,255,255,.08)}vg-player vg-controls .volume-control .volume-slider-vertical .settings-group:last-child{border-bottom:none}vg-player vg-controls .volume-control .volume-slider-vertical .settings-group h5{color:#ddd;font-size:12px;font-weight:500;margin:0 0 12px;text-transform:uppercase;letter-spacing:.5px;opacity:.8}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid{display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;width:100%}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:6px;width:100%;min-height:70px;padding:10px 5px;background:#ffffff0d;border:2px solid transparent;border-radius:10px;color:#f0f0f0;cursor:pointer;transition:all .3s cubic-bezier(.4,0,.2,1);font-size:11px;font-weight:500;text-align:center;text-transform:capitalize;position:relative;overflow:hidden}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button:before{content:\"\";position:absolute;top:0;left:-100%;width:100%;height:100%;background:linear-gradient(90deg,transparent,rgba(255,255,255,.05),transparent);transition:left .5s}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button:hover:before{left:100%}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button:hover{background:#ffffff1a;border-color:#ff8c004d;transform:translateY(-2px);box-shadow:0 4px 12px #0000004d}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid button.active{background:linear-gradient(135deg,#ff8c0033,#ff5c001a);border-color:#ff8c00;box-shadow:0 0 10px #ff8c0040}vg-player vg-controls .volume-control .volume-slider-vertical .settings-grid .settings-icon{font-size:20px;margin-bottom:4px;filter:drop-shadow(0 1px 2px rgba(0,0,0,.3))}@keyframes slideUp{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}vg-player vg-controls .quality-control,vg-player vg-controls .speed-control{position:relative;min-width:100px;text-align:center}vg-player vg-controls .quality-control .quality-trigger,vg-player vg-controls .quality-control .speed-trigger,vg-player vg-controls .speed-control .quality-trigger,vg-player vg-controls .speed-control .speed-trigger{padding:8px 12px;background:#ffffff26;border-radius:15px;color:#fff;font-size:13px;cursor:pointer;border:1px solid rgba(255,255,255,.3);transition:all .2s ease}vg-player vg-controls .quality-control .quality-trigger:hover,vg-player vg-controls .quality-control .speed-trigger:hover,vg-player vg-controls .speed-control .quality-trigger:hover,vg-player vg-controls .speed-control .speed-trigger:hover{background:#ffffff40}vg-player vg-controls .quality-control .quality-dropdown,vg-player vg-controls .quality-control .speed-dropdown,vg-player vg-controls .speed-control .quality-dropdown,vg-player vg-controls .speed-control .speed-dropdown{position:absolute;left:50%;transform:translate(-50%);background:#000;border-radius:8px;min-width:120px;box-shadow:0 5px 15px #0000004d;z-index:100;overflow:hidden}vg-player vg-controls .quality-control .quality-dropdown.upward,vg-player vg-controls .quality-control .speed-dropdown.upward,vg-player vg-controls .speed-control .quality-dropdown.upward,vg-player vg-controls .speed-control .speed-dropdown.upward{bottom:100%;top:auto;margin-bottom:8px}vg-player vg-controls .quality-control .quality-dropdown ul,vg-player vg-controls .quality-control .speed-dropdown ul,vg-player vg-controls .speed-control .quality-dropdown ul,vg-player vg-controls .speed-control .speed-dropdown ul{list-style:none;padding:0;margin:0}vg-player vg-controls .quality-control .quality-dropdown ul li,vg-player vg-controls .quality-control .speed-dropdown ul li,vg-player vg-controls .speed-control .quality-dropdown ul li,vg-player vg-controls .speed-control .speed-dropdown ul li{padding:10px 15px;color:#fff;cursor:pointer;text-align:center;transition:background .2s ease;border-bottom:1px solid rgba(255,255,255,.1)}vg-player vg-controls .quality-control .quality-dropdown ul li:hover,vg-player vg-controls .quality-control .speed-dropdown ul li:hover,vg-player vg-controls .speed-control .quality-dropdown ul li:hover,vg-player vg-controls .speed-control .speed-dropdown ul li:hover{background:#ffffff26}vg-player vg-controls .quality-control .quality-dropdown ul li:last-child,vg-player vg-controls .quality-control .speed-dropdown ul li:last-child,vg-player vg-controls .speed-control .quality-dropdown ul li:last-child,vg-player vg-controls .speed-control .speed-dropdown ul li:last-child{border-bottom:none}vg-player vg-controls .quality-control .quality-dropdown ul li.active,vg-player vg-controls .quality-control .speed-dropdown ul li.active,vg-player vg-controls .speed-control .quality-dropdown ul li.active,vg-player vg-controls .speed-control .speed-dropdown ul li.active{color:#ff8c00;font-weight:700;background:#ff8c001a}vg-player vg-controls .s-c{position:relative;height:42px;display:flex;align-items:center}vg-player vg-controls .s-b{width:42px;height:42px;background:#ffffff26;border-radius:50%;color:#ffdb4d;cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:18px;z-index:10;border:none;padding:0}vg-player vg-controls .s-b i{transition:transform .3s}vg-player vg-controls .s-d{position:absolute;right:0;bottom:calc(100% + 8px);margin-bottom:0;background:#000;border:1px solid rgba(255,255,255,.15);border-radius:12px;padding:0;min-width:280px;box-shadow:0 8px 32px #00000080;z-index:100;opacity:0;visibility:hidden;transition:opacity .2s ease,visibility .2s ease}vg-player vg-controls .s-c:hover .s-d,vg-player vg-controls .s-d:hover{opacity:1;visibility:visible}vg-player vg-controls .s-h{background:#ffffff0d;padding:15px 20px;border-bottom:1px solid rgba(255,255,255,.08);margin:0}vg-player vg-controls .s-h h4{color:#f0f0f0;font-size:14px;margin:0}vg-player vg-controls .s-g{padding:15px 20px;border-bottom:1px solid rgba(255,255,255,.08)}vg-player vg-controls .s-g:last-child{border-bottom:0}vg-player vg-controls .s-g h5{color:#ddd;font-size:12px;margin:0 0 12px;opacity:.8}vg-player vg-controls .s-grid{display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;width:100%}vg-player vg-controls .s-grid button{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:6px;width:100%;min-height:70px;padding:10px 5px;background:#ffffff0d;border:2px solid transparent;border-radius:10px;color:#f0f0f0;cursor:pointer;font-size:11px;text-align:center}vg-player vg-controls .s-grid button:hover{background:#ffffff1a;border-color:#ffffff4d;transform:translateY(-2px)}vg-player vg-controls .s-grid button.active{background:#ffffff26;border-color:#ffffff4d}vg-player vg-controls .s-i{font-size:20px}vg-player vg-fullscreen{cursor:pointer;width:45px;height:45px;color:#fff;font-size:24px;transition:all .3s ease;display:flex;align-items:center;justify-content:center;border-radius:50%;background:#fff3}vg-player vg-fullscreen:hover{transform:scale(1.15);background:#ffffff4d;box-shadow:0 0 10px #ffffff80}@media (max-width: 768px){vg-player{padding-bottom:75%}vg-player vg-controls{height:45px}vg-player vg-controls .controls-container .left-controls,vg-player vg-controls .controls-container .right-controls{gap:8px}vg-player vg-controls .controls-container select{padding:4px 8px;font-size:12px;height:28px}vg-player vg-controls button{width:32px;height:32px;font-size:14px}vg-player vg-controls .quality-control,vg-player vg-controls .speed-control{min-width:80px}vg-player vg-controls .quality-control .quality-trigger,vg-player vg-controls .quality-control .speed-trigger,vg-player vg-controls .speed-control .quality-trigger,vg-player vg-controls .speed-control .speed-trigger{padding:6px 10px;font-size:12px}vg-player vg-controls .settings-button,vg-player vg-controls .quality-button,vg-player vg-controls .speed-button{display:block}vg-player vg-controls .widescreen-button,vg-player vg-controls .web-fullscreen-button{display:none}}@media (max-width: 480px){vg-player vg-controls{height:40px}vg-player vg-controls .controls-container .time-display{font-size:12px}vg-player vg-controls .quality-control,vg-player vg-controls .speed-control{min-width:70px}vg-player vg-controls .quality-control .quality-trigger,vg-player vg-controls .quality-control .speed-trigger,vg-player vg-controls .speed-control .quality-trigger,vg-player vg-controls .speed-control .speed-trigger{padding:4px 8px;font-size:11px}vg-player vg-controls .keyboard-hint{flex-wrap:wrap;font-size:12px}vg-player vg-controls .keyboard-hint span{margin:3px}}@media (max-width: 768px){.video-container{width:90%}}@media (max-width: 480px){.video-container{width:95%}}:host-context(.web-fullscreen) .video-container{position:fixed;top:0;left:0;width:100%;height:100%;z-index:10000;background:#000;margin:0;padding:0}:host-context(.web-fullscreen) .video-container vg-player{width:100%;height:100%;padding-bottom:0}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.vg-overlay-play .vg-overlay-play:before{color:orange!important}\n"] }]
        }], ctorParameters: () => [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }], propDecorators: { player: [{
                type: ViewChild,
                args: ['mediaPlayer']
            }], media: [{
                type: ViewChild,
                args: ['media']
            }], scrubBar: [{
                type: ViewChild,
                args: ['scrubBar']
            }] } });

/**
 * FmodeVideoModule 提供视频播放器组件的NgModule包装
 * 适用于传统的Angular模块系统
 */
class FmodeVideoModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.4", ngImport: i0, type: FmodeVideoModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "20.1.4", ngImport: i0, type: FmodeVideoModule, imports: [CommonModule,
            FormsModule,
            VgCoreModule,
            VgControlsModule,
            VgOverlayPlayModule,
            VgBufferingModule,
            Videogular // 对于standalone组件，应该直接导入而不是声明
        ], exports: [Videogular] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "20.1.4", ngImport: i0, type: FmodeVideoModule, imports: [CommonModule,
            FormsModule,
            VgCoreModule,
            VgControlsModule,
            VgOverlayPlayModule,
            VgBufferingModule,
            Videogular // 对于standalone组件，应该直接导入而不是声明
        ] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.4", ngImport: i0, type: FmodeVideoModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        VgCoreModule,
                        VgControlsModule,
                        VgOverlayPlayModule,
                        VgBufferingModule,
                        Videogular // 对于standalone组件，应该直接导入而不是声明
                    ],
                    exports: [Videogular]
                }]
        }] });

/*
 * Public API Surface of fmode-video
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FmodeVideoModule, Videogular };
//# sourceMappingURL=fmode-video.mjs.map
