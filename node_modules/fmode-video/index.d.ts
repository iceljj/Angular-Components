import * as i0 from '@angular/core';
import { OnInit, OnDestroy, AfterViewInit, ElementRef, Renderer2, ChangeDetectorRef, NgZone } from '@angular/core';
import * as i3 from '@videogular/ngx-videogular/core';
import { VgApiService, VgPlayerComponent } from '@videogular/ngx-videogular/core';
import * as i1 from '@angular/common';
import * as i2 from '@angular/forms';
import * as i4 from '@videogular/ngx-videogular/controls';
import * as i5 from '@videogular/ngx-videogular/overlay-play';
import * as i6 from '@videogular/ngx-videogular/buffering';

/**
 * 视频播放器组件 (使用HLS实现)
 * @remarks
 * 基于HLS.js实现大厂级别的视频播放功能，包括：
 * 1. 支持HLS流媒体播放
 * 2. 智能预加载和缓存管理
 * 3. 自适应码率切换
 * 4. 多种视图模式（宽屏/关灯/无黑边）
 *
 * 注意：本组件已完全重构以支持HLS协议
 *
 * @example
 * <app-videogular [videoSources]="hlsSources"></app-videogular>
 */
declare class Videogular implements OnInit, OnDestroy, AfterViewInit {
    private renderer;
    private cdr;
    private zone;
    /** 播放器API实例 */
    api: VgApiService;
    /** HLS实例 */
    private hls;
    /** 播放器DOM元素引用 */
    player: VgPlayerComponent;
    media: ElementRef<HTMLVideoElement>;
    scrubBar: ElementRef;
    /**
     * 是否正在播放
     */
    isPlaying: boolean;
    /**
     * 是否显示覆盖播放按钮
     */
    showOverlayPlay: boolean;
    /**
     * 是否隐藏控制栏
     */
    hideControls: boolean;
    /**
     * 是否正在缓冲
     */
    isBuffering: boolean;
    /**
     * 是否加载错误
     */
    loadError: boolean;
    /**
     * 是否为直播流
     */
    isLiveStream: boolean;
    /**
     * 音量大小 (0-1)
     */
    volume: number;
    /**
     * 是否静音
     */
    isMuted: boolean;
    /**
     * 播放速率
     */
    playbackRate: number;
    /**
     * 播放进度百分比
     */
    progress: number;
    /**
     * 缓冲百分比
     */
    bufferPercentage: number;
    /**
     * 缓冲区间列表
     */
    bufferedRanges: any[];
    /**
     * 缓冲开始时间
     */
    bufferStart: number;
    /**
     * 缓冲结束时间
     */
    bufferEnd: number;
    /**
     * 视频总时长
     */
    totalDuration: number;
    /**
     * 是否为宽屏模式
     */
    isWidescreen: boolean;
    /**
     * 是否为关灯模式
     */
    isTheaterMode: boolean;
    /**
     * 是否为网页全屏
     */
    isWebFullscreen: boolean;
    /**
     * 是否显示音量滑块
     */
    showVolumeSlider: boolean;
    /**
     * 是否显示画质选项
     */
    showQualityOptions: boolean;
    /**
     * 是否显示播放速度选项
     */
    showSpeedOptions: boolean;
    /**
     * 是否显示设置菜单
     */
    showSettingsMenu: boolean;
    /**
     * 播放速度选项列表
     */
    speedOptions: {
        label: string;
        value: number;
    }[];
    /**
     * 视频封面图
     */
    posterImage: string;
    /**
     * 当前选择的画质
     */
    selectedQuality: any;
    /**
     * 可用画质列表
     */
    availableQualities: any[];
    /**
     * 当前HLS流URL
     */
    currentHlsUrl: string;
    /**
     * HLS质量级别列表
     */
    hlsLevels: any[];
    /**
     * HLS配置选项
     */
    private hlsConfig;
    /**
     * 是否正在预加载
     */
    private isPreloading;
    /**
     * 控制栏隐藏定时器
     */
    private controlHideTimeout;
    /**
     * 空格键防抖标记
     */
    private spaceKeyDebounced;
    /**
     * 是否正在拖动进度条
     */
    private isScrubbing;
    /**
     * 拖动开始时的鼠标X坐标
     */
    private scrubStartX;
    /**
     * 拖动开始时的播放百分比
     */
    private scrubStartPercentage;
    /**
     * 拖动前是否正在播放
     */
    private wasPlaying;
    /**
     * 控制面板防抖定时器集合
     */
    private controlDebounceTimers;
    /**
     * 当前重试次数
     */
    private retryCount;
    /**
     * 最大重试次数
     */
    private maxRetries;
    /**
     * 缓冲超时定时器
     */
    private bufferingTimeout;
    /**
     * 缓冲超时持续时间(毫秒)
     */
    private bufferingTimeoutDuration;
    /**
     * 缓冲更新计时器
     */
    private bufferUpdateInterval;
    /**
     * 组件构造函数
     * @param renderer Angular渲染器，用于操作DOM元素
     * @param cdr 变更检测器，用于强制刷新UI
     * @param zone Angular区域，用于管理异步操作
     */
    constructor(renderer: Renderer2, cdr: ChangeDetectorRef, zone: NgZone);
    /**
     * 组件初始化钩子
     * 初始化HLS源列表和默认选中的画质
     */
    ngOnInit(): void;
    /**
     * 视图初始化完成钩子
     * 设置全局事件监听器并初始化HLS播放器
     */
    ngAfterViewInit(): void;
    /**
     * 组件销毁钩子
     * 清理所有资源，包括定时器和HLS实例
     */
    ngOnDestroy(): void;
    /**
     * 初始化HLS播放器
     * 创建并配置HLS实例，加载视频源，设置事件监听
     */
    private initializeHlsPlayer;
    /**
     * 设置HLS事件监听器
     * 为HLS实例添加各种事件的监听器，处理播放列表加载、缓冲、错误等情况
     */
    private setupHlsEvents;
    /**
     * 设置全局事件监听器
     * 为文档添加全局鼠标和键盘事件监听器，用于处理进度条拖动和全局快捷键
     */
    private setupGlobalListeners;
    /**
     * 检测视频流类型（直播/点播）
     * 根据视频的duration属性判断是直播流还是点播视频
     */
    private detectStreamType;
    /**
     * 清理资源
     * 在组件销毁时清理所有定时器、HLS实例和其他资源，防止内存泄漏
     */
    private cleanupResources;
    /**
     * 播放器准备就绪回调
     * 当Videogular播放器初始化完成后调用，设置初始状态和事件监听
     * @param api 视频播放器API实例
     */
    onPlayerReady(api: VgApiService): void;
    /**
     * 处理HLS错误
     * 根据不同类型的HLS错误采取相应的处理措施，如重试加载或显示错误信息
     * @param data 错误数据，包含错误详情和类型
     */
    private handleHlsError;
    /**
     * 显示缓冲指示器
     * 设置缓冲状态，隐藏覆盖播放按钮，并启动缓冲超时检测
     */
    showBuffering(): void;
    /**
     * 隐藏缓冲指示器
     * 重置缓冲状态并清理缓冲超时定时器
     */
    hideBuffering(): void;
    /**
     * 清除缓冲超时定时器
     * 取消缓冲超时检测，防止在缓冲恢复后触发错误处理
     */
    clearBufferingTimeout(): void;
    /**
     * 更新缓存显示
     * 计算并更新缓冲范围、缓冲百分比等参数，用于UI显示
     */
    private updateBufferDisplay;
    /**
     * 开始缓冲更新计时器
     * 设置定时更新缓冲状态的计时器，每500毫秒更新一次
     */
    private startBufferUpdateTimer;
    /**
     * 处理视频错误
     * 设置错误状态，并根据重试次数决定是否进行重试
     * @param message 错误信息（可选）
     */
    private handleVideoError;
    /**
     * 重试加载当前HLS流
     * 重置错误状态，尝试重新加载HLS流，如果失败则重新初始化播放器
     */
    retryLoading(): void;
    /**
     * 开始拖动进度条
     * 设置拖动状态并暂停播放，开始处理进度拖动
     * @param event 鼠标事件对象，包含鼠标位置信息
     */
    startScrubbing(event: MouseEvent): void;
    /**
     * 处理全局鼠标移动事件
     * 在拖动进度条时计算并更新当前的播放时间点
     * @param event 鼠标事件对象，包含当前鼠标位置
     */
    private handleGlobalMouseMove;
    /**
     * 处理全局鼠标释放事件
     * 结束进度条拖动，恢复之前的播放状态
     */
    private handleGlobalMouseUp;
    /**
     * 处理全局键盘事件
     * 根据按下的按键执行相应的播放器操作，如播放/暂停、快进/快退、全屏等
     * @param event 键盘事件对象，包含按键信息
     */
    private handleGlobalKeyDown;
    /**
     * 开始控制栏隐藏计时器
     * 显示控制栏并设置定时器，在指定时间后自动隐藏控制栏
     */
    startControlBarTimer(): void;
    /**
     * 重置控制栏隐藏计时器
     * 清除已存在的控制栏隐藏定时器，防止重复计时
     */
    resetControlBarTimer(): void;
    /**
     * 处理鼠标移动
     * 当鼠标在播放器上移动时，显示控制栏并重置隐藏计时器
     * @param event 鼠标事件对象
     */
    handleMouseMove(event: MouseEvent): void;
    /**
     * 处理键盘事件
     * @param event 键盘事件
     */
    handleKeyEvents(event: KeyboardEvent): void;
    /**
     * 切换播放状态
     * 根据当前播放状态执行暂停或播放操作，如有加载错误则尝试重试
     */
    togglePlayback(): void;
    /**
     * 开始播放
     * 尝试播放视频内容，如有加载错误则进行重试
     */
    startPlayback(): void;
    /**
     * 进入全屏模式
     * 使用浏览器兼容的API请求全屏显示视频元素
     */
    enterFullscreen(): void;
    /**
     * 切换宽屏模式
     * 切换视频播放器的宽屏显示状态
     */
    toggleWidescreen(): void;
    /**
     * 切换关灯模式
     * 切换播放器的关灯模式（影院模式），在该模式下会自动退出网页全屏
     */
    toggleTheaterMode(): void;
    /**
     * 切换网页全屏
     * 切换网页全屏模式，添加或移除全屏CSS类，在进入网页全屏时会自动退出影院模式
     */
    toggleWebFullscreen(): void;
    /**
     * 设置音量
     * 根据输入事件或当前音量值设置视频播放器的音量
     * @param event 输入事件（可选），通常来自音量控制滑块
     */
    setVolume(event?: Event): void;
    /**
     * 切换静音
     * 切换播放器的静音状态，同时保持原始音量值
     */
    toggleMute(): void;
    /**
     * 设置播放速率
     * 根据当前设置的播放速率值更新视频播放器的实际播放速度
     */
    setPlaybackRate(): void;
    /**
     * 增加播放速度
     * 将播放速度增加到预设速度选项中的下一个更高值
     */
    increaseSpeed(): void;
    /**
     * 降低播放速度
     * 将播放速度降低到预设速度选项中的下一个更低值
     */
    decreaseSpeed(): void;
    /**
     * 选择视频质量
     * 切换视频的播放质量，并重新初始化播放器以应用新的质量设置
     * @param quality 质量选项对象，包含URL和其他质量相关信息
     */
    selectQuality(quality: any): void;
    /**
     * 选择播放速度
     * 设置指定的播放速度并更新播放器状态，同时关闭速度选项菜单
     * @param speed 播放速度值
     */
    selectSpeed(speed: number): void;
    /**
     * 获取速度标签
     * 根据当前播放速度值获取对应的显示标签文本
     * @returns 播放速度的显示标签
     */
    getSpeedLabel(): string;
    /**
     * 控制面板显示控制
     * 处理控制面板组件的悬停或焦点进入事件，显示相应的控制选项
     * @param controlType 控制类型，支持质量、速度或音量控制
     */
    onControlEnter(controlType: 'quality' | 'speed' | 'volume'): void;
    /**
     * 控制面板隐藏控制
     * 处理控制面板组件的悬停或焦点离开事件，设置定时器后隐藏相应的控制选项
     * @param controlType 控制类型，支持质量、速度或音量控制
     */
    onControlLeave(controlType: 'quality' | 'speed' | 'volume'): void;
    /**
     * 重置所有视图模式
     * 恢复播放器的默认视图状态，包括关闭宽屏、影院模式，关闭所有菜单，退出全屏等
     */
    resetAllModes(): void;
    /**
     * 处理上下文菜单
     * 阻止默认的右键上下文菜单显示，用于自定义播放器右键菜单
     * @param event 鼠标事件对象
     */
    menu(event: Event): void;
    /**
     * 切换到下一个视频
     * 实现简单的播放列表轮播功能，切换到下一个可用的视频质量选项
     */
    nextVideo(): void;
    /**************************************************************************/
    /**************************************************************************/
    /**
     * 视频准备就绪事件
     * 处理视频可以开始播放的事件，隐藏缓冲指示器，检测流类型并更新视频时长
     * @param event 事件对象
     */
    onCanPlay(event: Event): void;
    /**
     * 视频错误事件
     * 处理视频播放过程中的错误事件，记录错误信息并执行相应的错误处理
     * @param event 事件对象
     */
    onVideoError(event: Event): void;
    /**
     * 视频缓冲停滞事件
     * @param event 事件对象
     */
    onStalled(event: Event): void;
    /**
     * 视频缓冲恢复事件
     * @param event 事件对象
     */
    onPlaying(event: Event): void;
    /**
     * 视频缓冲开始事件
     * @param event 事件对象
     */
    onWaiting(event: Event): void;
    /**
     * 视频缓冲进度事件
     * @param event 事件对象
     */
    onProgress(event: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<Videogular, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<Videogular, "app-videogular", never, {}, {}, never, never, true, never>;
}

/**
 * FmodeVideoModule 提供视频播放器组件的NgModule包装
 * 适用于传统的Angular模块系统
 */
declare class FmodeVideoModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<FmodeVideoModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<FmodeVideoModule, never, [typeof i1.CommonModule, typeof i2.FormsModule, typeof i3.VgCoreModule, typeof i4.VgControlsModule, typeof i5.VgOverlayPlayModule, typeof i6.VgBufferingModule, typeof Videogular], [typeof Videogular]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<FmodeVideoModule>;
}

export { FmodeVideoModule, Videogular };
